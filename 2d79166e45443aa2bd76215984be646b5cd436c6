{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ff217fba_cbb8a9f3",
        "filename": "vndk/tools/header-checker/src/repr/abi_diff_helpers.cpp",
        "patchSetId": 6
      },
      "lineNbr": 400,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2023-02-14T16:10:36Z",
      "side": 1,
      "message": "although this new implementation is more analytically efficient (linear complexity, traverse input data once), I find it really difficult to read and parse, and spend a lot of time reasoning any off-by-1/0 case.\n\nI would rather we use a less efficient, but easy to understand, two-pass approach like the original code (1st pass create (offset,type)-\u003eir map, 2nd pass filter the old/new fields with the map), we just need to modify the original code to handle the new \"(offset,type) pair must be unique requirement\" during the 1st pass.\n\nwhat\u0027s the usual size of the input vector. do we often, or ever, need to compare really huge struct definitions?\nthe runtime difference between new and old approach would be negligible if the struct definitions we are comparing are usually small.",
      "revId": "2d79166e45443aa2bd76215984be646b5cd436c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "023b8997_e72c228f",
        "filename": "vndk/tools/header-checker/src/repr/abi_diff_helpers.cpp",
        "patchSetId": 6
      },
      "lineNbr": 400,
      "author": {
        "id": 1130827
      },
      "writtenOn": "2023-02-15T06:59:46Z",
      "side": 1,
      "message": "The length is usually less than 100.\n\nThe original code needs two multimaps, a structure of (offset, type), key comparator, and AddToMap() for multimap. The predicate function has to take the two multimaps as parameters so that it can determine whether a key is unique in both. Therefore, I think both algorithms would look difficult.",
      "parentUuid": "ff217fba_cbb8a9f3",
      "revId": "2d79166e45443aa2bd76215984be646b5cd436c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1cfd4e5d_5b5cf727",
        "filename": "vndk/tools/header-checker/src/repr/abi_diff_helpers.cpp",
        "patchSetId": 6
      },
      "lineNbr": 418,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2023-02-10T11:31:32Z",
      "side": 1,
      "message": "Can we initialize this as `next_old_it \u003d std::next(old_it)` `next_new_it \u003d std::next(new_it)`? This way it is clear at least one of old_it \u0026 new_it is incremented by some non-zero amount every loop, thus ensure the loop is finite.",
      "revId": "2d79166e45443aa2bd76215984be646b5cd436c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fce4ab6b_e692eb28",
        "filename": "vndk/tools/header-checker/src/repr/abi_diff_helpers.cpp",
        "patchSetId": 6
      },
      "lineNbr": 418,
      "author": {
        "id": 1130827
      },
      "writtenOn": "2023-02-13T02:48:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1cfd4e5d_5b5cf727",
      "revId": "2d79166e45443aa2bd76215984be646b5cd436c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "00a5f416_3a3f1e75",
        "filename": "vndk/tools/header-checker/src/repr/abi_diff_helpers.cpp",
        "patchSetId": 6
      },
      "lineNbr": 422,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2023-02-10T11:31:32Z",
      "side": 1,
      "message": "I\u0027d prefer `std::distance(old_it, next_old_it) \u003e 1` for this kind of comparison, but it\u0027s your call.\n\nhttps://en.cppreference.com/w/cpp/iterator/distance",
      "range": {
        "startLine": 422,
        "startChar": 37,
        "endLine": 422,
        "endChar": 61
      },
      "revId": "2d79166e45443aa2bd76215984be646b5cd436c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}