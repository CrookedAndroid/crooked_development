{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f580265b_950cc1f2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1010056
      },
      "writtenOn": "2022-12-09T09:13:18Z",
      "side": 1,
      "message": "What are the ultimate goals of this rewrite? Do you intend to match all the features/functionality of cargo2android.py? Will you support emitting Bazel build rules as well?",
      "revId": "51f6cd7f4a90f505b42fa157328f79f5e741ea71",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "20ac1260_9a278ca3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-12-13T01:24:01Z",
      "side": 1,
      "message": "The main goal is to make the crosvm merge less painful. I\u0027d be willing to maintain this as a fork even if that is its only use case.\n\nIf the various android rust folks are happy with it, then I\u0027d be up for trying to obsolete cargo2android.py in favor of this. I think the only big feature I cut is the merging logic (when there are \"extra\" cargo invocations). I need to look at a project that is using it to really understand what it is trying to do.\n\n\u003e Will you support emitting Bazel build rules as well?\n\nI factored out most of the output format code from the business logic, so I think bazel would be easy to support alongside soong.\n\n(That is assuming that the rust bazel rules have a close correspondence to the rust soong modules. For example, if instead, we try to switch directly to something like https://github.com/bazelbuild/rules_rust, then the business logic would probably need significant changes as well)",
      "parentUuid": "f580265b_950cc1f2",
      "revId": "51f6cd7f4a90f505b42fa157328f79f5e741ea71",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2ab981cb_cbe2cad5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1010056
      },
      "writtenOn": "2022-12-15T18:33:57Z",
      "side": 1,
      "message": "Would it make more sense to just host this as part of crosvm instead of here? `development/scripts/` is actually probably not the right place for this (even cargo2android probably belongs in a different project instead). While it might be possible to find a maintainer/champion for this fork/rewrite in the Android Rust team, unfortunately I don\u0027t think there is a high prioritization for that, which further makes me want to separate this out as crosvm-only tool.",
      "parentUuid": "20ac1260_9a278ca3",
      "revId": "51f6cd7f4a90f505b42fa157328f79f5e741ea71",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c8f71e2_401e9c0b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-12-16T18:03:03Z",
      "side": 1,
      "message": "I\u0027d rather not put it in the crosvm repo itself. If we put it in the upstream repo, then we run into some awkwardness around updating the tool vs pulling in new versions of crosvm (e.g. bisecting could be extra painful). If it is just in the AOSP repo, then it makes it harder to track divergence with upstream.\n\nIs there a good directory for random dev tools? Maybe `development/crosvm_tools/cargo_embargo`?",
      "parentUuid": "2ab981cb_cbe2cad5",
      "revId": "51f6cd7f4a90f505b42fa157328f79f5e741ea71",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "675702e4_7e25d4fa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2023-01-04T23:02:20Z",
      "side": 1,
      "message": "let me know what you think. it would be nice to submit this somewhere so that we can continue to iterate on it more easily",
      "parentUuid": "9c8f71e2_401e9c0b",
      "revId": "51f6cd7f4a90f505b42fa157328f79f5e741ea71",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79045395_baccdf92",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1010056
      },
      "writtenOn": "2023-01-05T23:59:05Z",
      "side": 1,
      "message": "We wanted to discuss this with a few other folks in our Android Rust meeting next Monday, so I\u0027ll have a decision next week.",
      "parentUuid": "675702e4_7e25d4fa",
      "revId": "51f6cd7f4a90f505b42fa157328f79f5e741ea71",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f467978f_93375a8b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2023-01-17T23:03:11Z",
      "side": 1,
      "message": "resolving, continued in other comment thread",
      "parentUuid": "79045395_baccdf92",
      "revId": "51f6cd7f4a90f505b42fa157328f79f5e741ea71",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a58344d_f8698fac",
        "filename": "scripts/cargo_embargo/Android.bp",
        "patchSetId": 9
      },
      "lineNbr": 1,
      "author": {
        "id": 1010056
      },
      "writtenOn": "2022-12-09T09:13:18Z",
      "side": 1,
      "message": "2022",
      "range": {
        "startLine": 1,
        "startChar": 17,
        "endLine": 1,
        "endChar": 21
      },
      "revId": "51f6cd7f4a90f505b42fa157328f79f5e741ea71",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "db71fb14_688af5c5",
        "filename": "scripts/cargo_embargo/Android.bp",
        "patchSetId": 9
      },
      "lineNbr": 1,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-12-13T01:24:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7a58344d_f8698fac",
      "range": {
        "startLine": 1,
        "startChar": 17,
        "endLine": 1,
        "endChar": 21
      },
      "revId": "51f6cd7f4a90f505b42fa157328f79f5e741ea71",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7fae9447_bd998720",
        "filename": "scripts/cargo_embargo/src/main.rs",
        "patchSetId": 9
      },
      "lineNbr": 40,
      "author": {
        "id": 1010056
      },
      "writtenOn": "2022-12-09T09:13:18Z",
      "side": 1,
      "message": "This is an unfortunate default. It would be better to use the prebuilt cargo by default.\n\nAlthough cargo2android.py doesn\u0027t do it right now, we should also try to run cargo with the `--frozen` or `--offline` flags too, to minimize unnecessary network problems.",
      "range": {
        "startLine": 40,
        "startChar": 61,
        "endLine": 40,
        "endChar": 66
      },
      "revId": "51f6cd7f4a90f505b42fa157328f79f5e741ea71",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59b2954f_c9cdf530",
        "filename": "scripts/cargo_embargo/src/main.rs",
        "patchSetId": 9
      },
      "lineNbr": 40,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-12-13T01:24:01Z",
      "side": 1,
      "message": "Switching the default to the android prebuilts SGTM. They don\u0027t work for crosvm yet, but we are overriding this on the cli for crosvm anyways.\n\n`--offline` and `--frozen` seems like a good ideas to try",
      "parentUuid": "7fae9447_bd998720",
      "range": {
        "startLine": 40,
        "startChar": 61,
        "endLine": 40,
        "endChar": 66
      },
      "revId": "51f6cd7f4a90f505b42fa157328f79f5e741ea71",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f42b3c8b_c2eb9a96",
        "filename": "scripts/cargo_embargo/src/main.rs",
        "patchSetId": 9
      },
      "lineNbr": 40,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2023-01-17T23:28:10Z",
      "side": 1,
      "message": "\u003e This is an unfortunate default. It would be better to use the prebuilt cargo by default.\n\nAdded a TODO for now. I\u0027m hesitant to reproduce the code that uses a regexp to grab the rust version from a soong .go file. Will look for a simpler solution.",
      "parentUuid": "59b2954f_c9cdf530",
      "range": {
        "startLine": 40,
        "startChar": 61,
        "endLine": 40,
        "endChar": 66
      },
      "revId": "51f6cd7f4a90f505b42fa157328f79f5e741ea71",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}