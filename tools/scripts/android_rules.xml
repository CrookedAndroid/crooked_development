<?xml version="1.0" ?>
<project name="android_rules" default="debug">

    <property name="android-tools" value="${sdk-location}/tools" />

    <!-- Input directories -->
    <property name="source-folder" value="src" />
    <property name="resource-folder" value="res" />
    <property name="asset-folder" value="assets" />
    <property name="source-location" value="${basedir}/${source-folder}" />
    <available file="${basedir}/${asset-folder}" property="has.asset.folder"/>

    <!-- folder for the 3rd party java libraries -->
    <property name="external-libs" value="libs" />
    <property name="external-libs-location" value="${basedir}/${external-libs}"/>

    <!-- folder for the native libraries -->
    <property name="native-libs" value="libs" />
    <property name="native-libs-location" value="${basedir}/${native-libs}"/>

    <!-- Output directories -->
    <property name="out-folder" value="bin" />
    <property name="out-classes" value="${out-folder}/classes" />
    <property name="out-classes-location" value="${basedir}/${out-classes}"/>
    <!-- out folders for a parent project if this project is an instrumentation project -->
    <property name="main-out-folder" value="../${out-folder}" />
    <property name="main-out-classes" value="${main-out-folder}/classes"/>

    <!-- Create R.java in the source directory -->
    <property name="r-folder" value="${source-folder}" />

    <!-- Intermediate files -->
    <property name="dex-file" value="classes.dex" />
    <property name="intermediate-dex" value="${out-folder}/${dex-file}" />
    <!-- dx does not properly support incorrect / or \ based on the platform
         and Ant cannot convert them because the parameter is not a valid path.
         Because of this we have to compute different paths depending on the platform. -->
    <condition property="intermediate-dex-location"
            value="${basedir}\${intermediate-dex}"
            else="${basedir}/${intermediate-dex}" >
        <os family="windows"/>
    </condition>

    <!-- The final package file to generate -->
    <property name="resources-package" value="${out-folder}/${ant.project.name}.ap_"/>
    <property name="resources-package-location" value="${basedir}/${resources-package}"/>

    <property name="out-debug-package" value="${out-folder}/${ant.project.name}-debug.apk"/>
    <property name="out-debug-package-location" value="${basedir}/${out-debug-package}"/>

    <property name="out-unsigned-package" value="${out-folder}/${ant.project.name}-unsigned.apk"/>
    <property name="out-unsigned-package-location" value="${basedir}/${out-unsigned-package}"/>

    <!-- Tools -->
    <condition property="exe" value="exe" else=""><os family="windows"/></condition>
    <condition property="bat" value="bat" else=""><os family="windows"/></condition>

    <property name="aapt" value="${android-tools}/aapt${exe}"/>
    <property name="aidl" value="${android-tools}/aidl${exe}"/>
    <property name="adb" value="${android-tools}/adb${exe}"/>
    <property name="dx" value="${android-tools}/dx${bat}"/>
    <property name="apk-builder" value="${android-tools}/apkbuilder${bat}"/>

	<!-- rules -->

    <!-- Create the output directories if they don't exist yet. -->
    <target name="dirs">
        <echo>Creating output directories if needed...</echo>
        <mkdir dir="${out-folder}" />
        <mkdir dir="${out-classes}" />
    </target>

    <!-- Generate the R.java file for this project's resources. -->
    <target name="resource-src" depends="dirs">
        <echo>Generating R.java / Manifest.java from the resources...</echo>
        <exec executable="${aapt}" failonerror="true">
            <arg value="package" />
            <arg value="-m" />
            <arg value="-J" />
            <arg path="${r-folder}" />
            <arg value="-M" />
            <arg path="AndroidManifest.xml" />
            <arg value="-S" />
            <arg path="${resource-folder}" />
            <arg value="-I" />
            <arg path="${android-jar}" />
        </exec>
    </target>

    <!-- Generate java classes from .aidl files. -->
    <target name="aidl" depends="dirs">
        <echo>Compiling aidl files into Java classes...</echo>
        <apply executable="${aidl}" failonerror="true">
            <arg value="-p${android-aidl}" />
            <arg value="-I${source-folder}" />
            <fileset dir="${source-folder}">
                <include name="**/*.aidl"/>
            </fileset>
        </apply>
    </target>

    <!-- Compile this project's .java files into .class files. -->
    <target name="compile" depends="dirs, resource-src, aidl">
        <javac encoding="ascii" target="1.5" debug="true" extdirs=""
                srcdir="${source-folder}"
                destdir="${out-classes}"
                bootclasspathref="android.target.classpath">
            <classpath>
                <fileset dir="${external-libs}" includes="*.jar"/>
                <pathelement path="${main-out-classes}"/>
            </classpath>
         </javac>
    </target>

    <!-- Convert this project's .class files into .dex files. -->
    <target name="dex" depends="compile">
        <echo>Converting compiled files and external libraries into ${out-folder}/${dex-file}...</echo>
        <apply executable="${dx}" failonerror="true" parallel="true">
            <arg value="--dex" />
            <arg value="--output=${intermediate-dex-location}" />
            <arg path="${out-classes-location}" />
            <fileset dir="${external-libs}" includes="*.jar"/>
        </apply>
    </target>

    <!-- Put the project's resources into the output package file. -->
    <target name="package-res-and-assets" if="has.asset.folder">
        <echo>Packaging resources and assets...</echo>
        <exec executable="${aapt}" failonerror="true">
            <arg value="package" />
            <arg value="-f" />
            <arg value="-M" />
            <arg path="AndroidManifest.xml" />
            <arg value="-S" />
            <arg path="${resource-folder}" />
            <arg value="-A" />
            <arg path="${asset-folder}" />
            <arg value="-I" />
            <arg path="${android-jar}" />
            <arg value="-F" />
            <arg value="${resources-package}" />
        </exec>
    </target>

    <!-- Same as package-res-and-assets, but without "-A ${asset-folder}" -->
    <target name="package-res-no-assets" unless="has.asset.folder">
        <echo>Packaging resources...</echo>
        <exec executable="${aapt}" failonerror="true">
            <arg value="package" />
            <arg value="-f" />
            <arg value="-M" />
            <arg path="AndroidManifest.xml" />
            <arg value="-S" />
            <arg path="${resource-folder}" />
            <!-- No assets directory -->
            <arg value="-I" />
            <arg path="${android-jar}" />
            <arg value="-F" />
            <arg path="${resources-package}" />
        </exec>
    </target>

    <!-- Package the application and sign it with a debug key.
         This is the default target when building. It is used for debug. -->
    <target name="debug" depends="dex, package-res-and-assets, package-res-no-assets">
        <echo>Packaging ${out-debug-package}, and signing it with a debug key...</echo>
        <exec executable="${apk-builder}" failonerror="true">
            <arg value="${out-debug-package-location}" />
            <arg value="-z" />
            <arg path="${resources-package-location}" />
            <arg value="-f" />
            <arg path="${intermediate-dex-location}" />
            <arg value="-rf" />
            <arg path="${source-location}" />
            <arg value="-rj" />
            <arg path="${external-libs-location}" />
            <arg value="-nf" />
            <arg path="${native-libs-location}" />
        </exec>
    </target>

    <!-- Package the application without signing it.
         This allows for the application to be signed later with an official publishing key. -->
    <target name="release" depends="dex, package-res-and-assets, package-res-no-assets">
        <echo>Packaging ${out-unsigned-package} for release...</echo>
        <exec executable="${apk-builder}" failonerror="true">
            <arg value="${out-unsigned-package-location}" />
            <arg value="-u" />
            <arg value="-z" />
            <arg path="${resources-package-location}" />
            <arg value="-f" />
            <arg path="${intermediate-dex-location}" />
            <arg value="-rf" />
            <arg path="${source-location}" />
            <arg value="-rj" />
            <arg path="${external-libs-location}" />
            <arg value="-nf" />
            <arg path="${native-libs-location}" />
        </exec>
        <echo>It will need to be signed with jarsigner before it is published.</echo>
    </target>

    <!-- Install the package on the default emulator -->
    <target name="install" depends="debug">
        <echo>Installing ${out-debug-package} onto default emulator...</echo>
        <exec executable="${adb}" failonerror="true">
            <arg value="install" />
            <arg path="${out-debug-package}" />
        </exec>
    </target>

    <target name="reinstall" depends="debug">
        <echo>Installing ${out-debug-package} onto default emulator...</echo>
        <exec executable="${adb}" failonerror="true">
            <arg value="install" />
            <arg value="-r" />
            <arg path="${out-debug-package}" />
        </exec>
    </target>

    <!-- Uinstall the package from the default emulator -->
    <target name="uninstall">
        <echo>Uninstalling ${application-package} from the default emulator...</echo>
        <exec executable="${adb}" failonerror="true">
            <arg value="uninstall" />
            <arg path="${application-package}" />
        </exec>
    </target>
    
    <target name="help">
        <!-- displays starts at col 13
              |13                                                              80| -->
        <echo>Android Ant Build. Available targets:</echo>
        <echo>   help:      Displays this help.</echo>
        <echo>   debug:     Builds the application and sign it with a debug key.</echo>
        <echo>   release:   Builds the application. The generated apk file must be</echo>
        <echo>              signed before it is published.</echo>
        <echo>   install:   Installs the debug package onto a running emulator or</echo>
        <echo>              device. This can only be used if the application has </echo>
        <echo>              not yet been installed.</echo>
        <echo>   reinstall: Installs the debug package on a running emulator or</echo>
        <echo>              device that already has the application.</echo>
        <echo>              The signatures must match.</echo>
        <echo>   uninstall: uninstall the application from a running emulator or</echo>
        <echo>              device.</echo>
    </target>
</project>
