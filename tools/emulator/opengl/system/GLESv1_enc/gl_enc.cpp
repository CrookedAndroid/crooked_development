// Generated Code - DO NOT EDIT !!
// generated by 'emugen'


#include <string.h>
#include "gl_opcodes.h"

#include "gl_enc.h"


#include <stdio.h>
static void enc_unsupported()
{
	ALOGE("Function is unsupported\n");
}

void glAlphaFunc_enc(void *self , GLenum func, GLclampf ref)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glAlphaFunc; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = func; ptr += 4;
	*(GLclampf *) (ptr) = ref; ptr += 4;
}

void glClearColor_enc(void *self , GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glClearColor; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLclampf *) (ptr) = red; ptr += 4;
	*(GLclampf *) (ptr) = green; ptr += 4;
	*(GLclampf *) (ptr) = blue; ptr += 4;
	*(GLclampf *) (ptr) = alpha; ptr += 4;
}

void glClearDepthf_enc(void *self , GLclampf depth)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glClearDepthf; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLclampf *) (ptr) = depth; ptr += 4;
}

void glClipPlanef_enc(void *self , GLenum plane, const GLfloat* equation)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_equation =  (4 * sizeof(float));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + __size_equation + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glClipPlanef; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = plane; ptr += 4;
	*(unsigned int *)(ptr) = __size_equation; ptr += 4;
	memcpy(ptr, equation, __size_equation);ptr += __size_equation;
}

void glColor4f_enc(void *self , GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glColor4f; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLfloat *) (ptr) = red; ptr += 4;
	*(GLfloat *) (ptr) = green; ptr += 4;
	*(GLfloat *) (ptr) = blue; ptr += 4;
	*(GLfloat *) (ptr) = alpha; ptr += 4;
}

void glDepthRangef_enc(void *self , GLclampf zNear, GLclampf zFar)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glDepthRangef; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLclampf *) (ptr) = zNear; ptr += 4;
	*(GLclampf *) (ptr) = zFar; ptr += 4;
}

void glFogf_enc(void *self , GLenum pname, GLfloat param)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glFogf; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(GLfloat *) (ptr) = param; ptr += 4;
}

void glFogfv_enc(void *self , GLenum pname, const GLfloat* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfloat));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glFogfv; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
}

void glFrustumf_enc(void *self , GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glFrustumf; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLfloat *) (ptr) = left; ptr += 4;
	*(GLfloat *) (ptr) = right; ptr += 4;
	*(GLfloat *) (ptr) = bottom; ptr += 4;
	*(GLfloat *) (ptr) = top; ptr += 4;
	*(GLfloat *) (ptr) = zNear; ptr += 4;
	*(GLfloat *) (ptr) = zFar; ptr += 4;
}

void glGetClipPlanef_enc(void *self , GLenum pname, GLfloat* eqn)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_eqn =  (4 * sizeof(GLfloat));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + __size_eqn + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glGetClipPlanef; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_eqn; ptr += 4;
	stream->readback(eqn, __size_eqn);
}

void glGetFloatv_enc(void *self , GLenum pname, GLfloat* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfloat));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glGetFloatv; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetLightfv_enc(void *self , GLenum light, GLenum pname, GLfloat* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfloat));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glGetLightfv; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = light; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetMaterialfv_enc(void *self , GLenum face, GLenum pname, GLfloat* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfloat));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glGetMaterialfv; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = face; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetTexEnvfv_enc(void *self , GLenum env, GLenum pname, GLfloat* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfloat));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glGetTexEnvfv; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = env; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetTexParameterfv_enc(void *self , GLenum target, GLenum pname, GLfloat* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfloat));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glGetTexParameterfv; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glLightModelf_enc(void *self , GLenum pname, GLfloat param)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glLightModelf; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(GLfloat *) (ptr) = param; ptr += 4;
}

void glLightModelfv_enc(void *self , GLenum pname, const GLfloat* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfloat));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glLightModelfv; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
}

void glLightf_enc(void *self , GLenum light, GLenum pname, GLfloat param)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glLightf; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = light; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(GLfloat *) (ptr) = param; ptr += 4;
}

void glLightfv_enc(void *self , GLenum light, GLenum pname, const GLfloat* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfloat));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glLightfv; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = light; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
}

void glLineWidth_enc(void *self , GLfloat width)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glLineWidth; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLfloat *) (ptr) = width; ptr += 4;
}

void glLoadMatrixf_enc(void *self , const GLfloat* m)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_m =  (16 * sizeof(GLfloat));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + __size_m + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glLoadMatrixf; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(unsigned int *)(ptr) = __size_m; ptr += 4;
	memcpy(ptr, m, __size_m);ptr += __size_m;
}

void glMaterialf_enc(void *self , GLenum face, GLenum pname, GLfloat param)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glMaterialf; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = face; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(GLfloat *) (ptr) = param; ptr += 4;
}

void glMaterialfv_enc(void *self , GLenum face, GLenum pname, const GLfloat* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfloat));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glMaterialfv; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = face; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
}

void glMultMatrixf_enc(void *self , const GLfloat* m)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_m =  (16 * sizeof(GLfloat));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + __size_m + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glMultMatrixf; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(unsigned int *)(ptr) = __size_m; ptr += 4;
	memcpy(ptr, m, __size_m);ptr += __size_m;
}

void glMultiTexCoord4f_enc(void *self , GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glMultiTexCoord4f; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLfloat *) (ptr) = s; ptr += 4;
	*(GLfloat *) (ptr) = t; ptr += 4;
	*(GLfloat *) (ptr) = r; ptr += 4;
	*(GLfloat *) (ptr) = q; ptr += 4;
}

void glNormal3f_enc(void *self , GLfloat nx, GLfloat ny, GLfloat nz)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glNormal3f; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLfloat *) (ptr) = nx; ptr += 4;
	*(GLfloat *) (ptr) = ny; ptr += 4;
	*(GLfloat *) (ptr) = nz; ptr += 4;
}

void glOrthof_enc(void *self , GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glOrthof; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLfloat *) (ptr) = left; ptr += 4;
	*(GLfloat *) (ptr) = right; ptr += 4;
	*(GLfloat *) (ptr) = bottom; ptr += 4;
	*(GLfloat *) (ptr) = top; ptr += 4;
	*(GLfloat *) (ptr) = zNear; ptr += 4;
	*(GLfloat *) (ptr) = zFar; ptr += 4;
}

void glPointParameterf_enc(void *self , GLenum pname, GLfloat param)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glPointParameterf; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(GLfloat *) (ptr) = param; ptr += 4;
}

void glPointParameterfv_enc(void *self , GLenum pname, const GLfloat* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfloat));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glPointParameterfv; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
}

void glPointSize_enc(void *self , GLfloat size)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glPointSize; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLfloat *) (ptr) = size; ptr += 4;
}

void glPolygonOffset_enc(void *self , GLfloat factor, GLfloat units)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glPolygonOffset; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLfloat *) (ptr) = factor; ptr += 4;
	*(GLfloat *) (ptr) = units; ptr += 4;
}

void glRotatef_enc(void *self , GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glRotatef; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLfloat *) (ptr) = angle; ptr += 4;
	*(GLfloat *) (ptr) = x; ptr += 4;
	*(GLfloat *) (ptr) = y; ptr += 4;
	*(GLfloat *) (ptr) = z; ptr += 4;
}

void glScalef_enc(void *self , GLfloat x, GLfloat y, GLfloat z)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glScalef; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLfloat *) (ptr) = x; ptr += 4;
	*(GLfloat *) (ptr) = y; ptr += 4;
	*(GLfloat *) (ptr) = z; ptr += 4;
}

void glTexEnvf_enc(void *self , GLenum target, GLenum pname, GLfloat param)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glTexEnvf; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(GLfloat *) (ptr) = param; ptr += 4;
}

void glTexEnvfv_enc(void *self , GLenum target, GLenum pname, const GLfloat* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfloat));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glTexEnvfv; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
}

void glTexParameterf_enc(void *self , GLenum target, GLenum pname, GLfloat param)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glTexParameterf; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(GLfloat *) (ptr) = param; ptr += 4;
}

void glTexParameterfv_enc(void *self , GLenum target, GLenum pname, const GLfloat* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfloat));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glTexParameterfv; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
}

void glTranslatef_enc(void *self , GLfloat x, GLfloat y, GLfloat z)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glTranslatef; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLfloat *) (ptr) = x; ptr += 4;
	*(GLfloat *) (ptr) = y; ptr += 4;
	*(GLfloat *) (ptr) = z; ptr += 4;
}

void glActiveTexture_enc(void *self , GLenum texture)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glActiveTexture; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = texture; ptr += 4;
}

void glAlphaFuncx_enc(void *self , GLenum func, GLclampx ref)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glAlphaFuncx; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = func; ptr += 4;
	*(GLclampx *) (ptr) = ref; ptr += 4;
}

void glBindBuffer_enc(void *self , GLenum target, GLuint buffer)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glBindBuffer; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLuint *) (ptr) = buffer; ptr += 4;
}

void glBindTexture_enc(void *self , GLenum target, GLuint texture)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glBindTexture; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLuint *) (ptr) = texture; ptr += 4;
}

void glBlendFunc_enc(void *self , GLenum sfactor, GLenum dfactor)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glBlendFunc; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = sfactor; ptr += 4;
	*(GLenum *) (ptr) = dfactor; ptr += 4;
}

void glBufferData_enc(void *self , GLenum target, GLsizeiptr size, const GLvoid* data, GLenum usage)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_data =  size;
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + __size_data + 4 + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glBufferData; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLsizeiptr *) (ptr) = size; ptr += 4;
	*(unsigned int *)(ptr) = __size_data; ptr += 4;
	memcpy(ptr, data, __size_data);ptr += __size_data;
	*(GLenum *) (ptr) = usage; ptr += 4;
}

void glBufferSubData_enc(void *self , GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid* data)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_data =  size;
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + __size_data + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glBufferSubData; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLintptr *) (ptr) = offset; ptr += 4;
	*(GLsizeiptr *) (ptr) = size; ptr += 4;
	*(unsigned int *)(ptr) = __size_data; ptr += 4;
	memcpy(ptr, data, __size_data);ptr += __size_data;
}

void glClear_enc(void *self , GLbitfield mask)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glClear; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLbitfield *) (ptr) = mask; ptr += 4;
}

void glClearColorx_enc(void *self , GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glClearColorx; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLclampx *) (ptr) = red; ptr += 4;
	*(GLclampx *) (ptr) = green; ptr += 4;
	*(GLclampx *) (ptr) = blue; ptr += 4;
	*(GLclampx *) (ptr) = alpha; ptr += 4;
}

void glClearDepthx_enc(void *self , GLclampx depth)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glClearDepthx; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLclampx *) (ptr) = depth; ptr += 4;
}

void glClearStencil_enc(void *self , GLint s)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glClearStencil; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLint *) (ptr) = s; ptr += 4;
}

void glClientActiveTexture_enc(void *self , GLenum texture)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glClientActiveTexture; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = texture; ptr += 4;
}

void glColor4ub_enc(void *self , GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 1 + 1 + 1 + 1;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glColor4ub; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLubyte *) (ptr) = red; ptr += 1;
	*(GLubyte *) (ptr) = green; ptr += 1;
	*(GLubyte *) (ptr) = blue; ptr += 1;
	*(GLubyte *) (ptr) = alpha; ptr += 1;
}

void glColor4x_enc(void *self , GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glColor4x; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLfixed *) (ptr) = red; ptr += 4;
	*(GLfixed *) (ptr) = green; ptr += 4;
	*(GLfixed *) (ptr) = blue; ptr += 4;
	*(GLfixed *) (ptr) = alpha; ptr += 4;
}

void glColorMask_enc(void *self , GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 1 + 1 + 1 + 1;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glColorMask; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLboolean *) (ptr) = red; ptr += 1;
	*(GLboolean *) (ptr) = green; ptr += 1;
	*(GLboolean *) (ptr) = blue; ptr += 1;
	*(GLboolean *) (ptr) = alpha; ptr += 1;
}

void glCompressedTexImage2D_enc(void *self , GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid* data)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_data = ((data != NULL) ?  imageSize : 0);
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + __size_data + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glCompressedTexImage2D; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLint *) (ptr) = level; ptr += 4;
	*(GLenum *) (ptr) = internalformat; ptr += 4;
	*(GLsizei *) (ptr) = width; ptr += 4;
	*(GLsizei *) (ptr) = height; ptr += 4;
	*(GLint *) (ptr) = border; ptr += 4;
	*(GLsizei *) (ptr) = imageSize; ptr += 4;
	*(unsigned int *)(ptr) = __size_data; ptr += 4;
	if (data != NULL) memcpy(ptr, data, __size_data);ptr += __size_data;
}

void glCompressedTexSubImage2D_enc(void *self , GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid* data)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_data =  imageSize;
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + __size_data + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glCompressedTexSubImage2D; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLint *) (ptr) = level; ptr += 4;
	*(GLint *) (ptr) = xoffset; ptr += 4;
	*(GLint *) (ptr) = yoffset; ptr += 4;
	*(GLsizei *) (ptr) = width; ptr += 4;
	*(GLsizei *) (ptr) = height; ptr += 4;
	*(GLenum *) (ptr) = format; ptr += 4;
	*(GLsizei *) (ptr) = imageSize; ptr += 4;
	*(unsigned int *)(ptr) = __size_data; ptr += 4;
	memcpy(ptr, data, __size_data);ptr += __size_data;
}

void glCopyTexImage2D_enc(void *self , GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glCopyTexImage2D; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLint *) (ptr) = level; ptr += 4;
	*(GLenum *) (ptr) = internalformat; ptr += 4;
	*(GLint *) (ptr) = x; ptr += 4;
	*(GLint *) (ptr) = y; ptr += 4;
	*(GLsizei *) (ptr) = width; ptr += 4;
	*(GLsizei *) (ptr) = height; ptr += 4;
	*(GLint *) (ptr) = border; ptr += 4;
}

void glCopyTexSubImage2D_enc(void *self , GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glCopyTexSubImage2D; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLint *) (ptr) = level; ptr += 4;
	*(GLint *) (ptr) = xoffset; ptr += 4;
	*(GLint *) (ptr) = yoffset; ptr += 4;
	*(GLint *) (ptr) = x; ptr += 4;
	*(GLint *) (ptr) = y; ptr += 4;
	*(GLsizei *) (ptr) = width; ptr += 4;
	*(GLsizei *) (ptr) = height; ptr += 4;
}

void glCullFace_enc(void *self , GLenum mode)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glCullFace; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = mode; ptr += 4;
}

void glDeleteBuffers_enc(void *self , GLsizei n, const GLuint* buffers)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_buffers =  (n * sizeof(GLuint));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + __size_buffers + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glDeleteBuffers; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLsizei *) (ptr) = n; ptr += 4;
	*(unsigned int *)(ptr) = __size_buffers; ptr += 4;
	memcpy(ptr, buffers, __size_buffers);ptr += __size_buffers;
}

void glDeleteTextures_enc(void *self , GLsizei n, const GLuint* textures)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_textures =  (n * sizeof(GLuint));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + __size_textures + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glDeleteTextures; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLsizei *) (ptr) = n; ptr += 4;
	*(unsigned int *)(ptr) = __size_textures; ptr += 4;
	memcpy(ptr, textures, __size_textures);ptr += __size_textures;
}

void glDepthFunc_enc(void *self , GLenum func)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glDepthFunc; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = func; ptr += 4;
}

void glDepthMask_enc(void *self , GLboolean flag)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 1;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glDepthMask; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLboolean *) (ptr) = flag; ptr += 1;
}

void glDepthRangex_enc(void *self , GLclampx zNear, GLclampx zFar)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glDepthRangex; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLclampx *) (ptr) = zNear; ptr += 4;
	*(GLclampx *) (ptr) = zFar; ptr += 4;
}

void glDisable_enc(void *self , GLenum cap)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glDisable; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = cap; ptr += 4;
}

void glDisableClientState_enc(void *self , GLenum array)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glDisableClientState; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = array; ptr += 4;
}

void glDrawArrays_enc(void *self , GLenum mode, GLint first, GLsizei count)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glDrawArrays; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = mode; ptr += 4;
	*(GLint *) (ptr) = first; ptr += 4;
	*(GLsizei *) (ptr) = count; ptr += 4;
}

void glEnable_enc(void *self , GLenum cap)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glEnable; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = cap; ptr += 4;
}

void glEnableClientState_enc(void *self , GLenum array)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glEnableClientState; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = array; ptr += 4;
}

void glFinish_enc(void *self )
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 0;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glFinish; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
}

void glFlush_enc(void *self )
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 0;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glFlush; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
}

void glFogx_enc(void *self , GLenum pname, GLfixed param)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glFogx; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(GLfixed *) (ptr) = param; ptr += 4;
}

void glFogxv_enc(void *self , GLenum pname, const GLfixed* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glFogxv; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
}

void glFrontFace_enc(void *self , GLenum mode)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glFrontFace; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = mode; ptr += 4;
}

void glFrustumx_enc(void *self , GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glFrustumx; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLfixed *) (ptr) = left; ptr += 4;
	*(GLfixed *) (ptr) = right; ptr += 4;
	*(GLfixed *) (ptr) = bottom; ptr += 4;
	*(GLfixed *) (ptr) = top; ptr += 4;
	*(GLfixed *) (ptr) = zNear; ptr += 4;
	*(GLfixed *) (ptr) = zFar; ptr += 4;
}

void glGetBooleanv_enc(void *self , GLenum pname, GLboolean* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLboolean));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glGetBooleanv; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetBufferParameteriv_enc(void *self , GLenum target, GLenum pname, GLint* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (sizeof(GLint));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glGetBufferParameteriv; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glClipPlanex_enc(void *self , GLenum pname, const GLfixed* eqn)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_eqn =  (4 * sizeof(GLfixed));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + __size_eqn + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glClipPlanex; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_eqn; ptr += 4;
	memcpy(ptr, eqn, __size_eqn);ptr += __size_eqn;
}

void glGenBuffers_enc(void *self , GLsizei n, GLuint* buffers)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_buffers =  (n * sizeof(GLuint));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + __size_buffers + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glGenBuffers; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLsizei *) (ptr) = n; ptr += 4;
	*(unsigned int *)(ptr) = __size_buffers; ptr += 4;
	stream->readback(buffers, __size_buffers);
}

void glGenTextures_enc(void *self , GLsizei n, GLuint* textures)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_textures =  (n * sizeof(GLuint));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + __size_textures + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glGenTextures; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLsizei *) (ptr) = n; ptr += 4;
	*(unsigned int *)(ptr) = __size_textures; ptr += 4;
	stream->readback(textures, __size_textures);
}

GLenum glGetError_enc(void *self )
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 0;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glGetError; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;

	GLenum retval;
	stream->readback(&retval, 4);
	return retval;
}

void glGetFixedv_enc(void *self , GLenum pname, GLfixed* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glGetFixedv; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetIntegerv_enc(void *self , GLenum pname, GLint* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLint));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glGetIntegerv; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetLightxv_enc(void *self , GLenum light, GLenum pname, GLfixed* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glGetLightxv; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = light; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetMaterialxv_enc(void *self , GLenum face, GLenum pname, GLfixed* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glGetMaterialxv; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = face; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetTexEnviv_enc(void *self , GLenum env, GLenum pname, GLint* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLint));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glGetTexEnviv; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = env; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetTexEnvxv_enc(void *self , GLenum env, GLenum pname, GLfixed* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glGetTexEnvxv; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = env; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetTexParameteriv_enc(void *self , GLenum target, GLenum pname, GLint* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (sizeof(GLint));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glGetTexParameteriv; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetTexParameterxv_enc(void *self , GLenum target, GLenum pname, GLfixed* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (sizeof(GLfixed));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glGetTexParameterxv; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glHint_enc(void *self , GLenum target, GLenum mode)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glHint; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLenum *) (ptr) = mode; ptr += 4;
}

GLboolean glIsBuffer_enc(void *self , GLuint buffer)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glIsBuffer; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLuint *) (ptr) = buffer; ptr += 4;

	GLboolean retval;
	stream->readback(&retval, 1);
	return retval;
}

GLboolean glIsEnabled_enc(void *self , GLenum cap)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glIsEnabled; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = cap; ptr += 4;

	GLboolean retval;
	stream->readback(&retval, 1);
	return retval;
}

GLboolean glIsTexture_enc(void *self , GLuint texture)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glIsTexture; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLuint *) (ptr) = texture; ptr += 4;

	GLboolean retval;
	stream->readback(&retval, 1);
	return retval;
}

void glLightModelx_enc(void *self , GLenum pname, GLfixed param)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glLightModelx; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(GLfixed *) (ptr) = param; ptr += 4;
}

void glLightModelxv_enc(void *self , GLenum pname, const GLfixed* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glLightModelxv; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
}

void glLightx_enc(void *self , GLenum light, GLenum pname, GLfixed param)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glLightx; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = light; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(GLfixed *) (ptr) = param; ptr += 4;
}

void glLightxv_enc(void *self , GLenum light, GLenum pname, const GLfixed* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glLightxv; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = light; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
}

void glLineWidthx_enc(void *self , GLfixed width)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glLineWidthx; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLfixed *) (ptr) = width; ptr += 4;
}

void glLoadIdentity_enc(void *self )
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 0;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glLoadIdentity; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
}

void glLoadMatrixx_enc(void *self , const GLfixed* m)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_m =  (16 * sizeof(GLfixed));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + __size_m + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glLoadMatrixx; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(unsigned int *)(ptr) = __size_m; ptr += 4;
	memcpy(ptr, m, __size_m);ptr += __size_m;
}

void glLogicOp_enc(void *self , GLenum opcode)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glLogicOp; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = opcode; ptr += 4;
}

void glMaterialx_enc(void *self , GLenum face, GLenum pname, GLfixed param)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glMaterialx; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = face; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(GLfixed *) (ptr) = param; ptr += 4;
}

void glMaterialxv_enc(void *self , GLenum face, GLenum pname, const GLfixed* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glMaterialxv; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = face; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
}

void glMatrixMode_enc(void *self , GLenum mode)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glMatrixMode; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = mode; ptr += 4;
}

void glMultMatrixx_enc(void *self , const GLfixed* m)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_m =  (16 * sizeof(GLfixed));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + __size_m + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glMultMatrixx; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(unsigned int *)(ptr) = __size_m; ptr += 4;
	memcpy(ptr, m, __size_m);ptr += __size_m;
}

void glMultiTexCoord4x_enc(void *self , GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glMultiTexCoord4x; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLfixed *) (ptr) = s; ptr += 4;
	*(GLfixed *) (ptr) = t; ptr += 4;
	*(GLfixed *) (ptr) = r; ptr += 4;
	*(GLfixed *) (ptr) = q; ptr += 4;
}

void glNormal3x_enc(void *self , GLfixed nx, GLfixed ny, GLfixed nz)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glNormal3x; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLfixed *) (ptr) = nx; ptr += 4;
	*(GLfixed *) (ptr) = ny; ptr += 4;
	*(GLfixed *) (ptr) = nz; ptr += 4;
}

void glOrthox_enc(void *self , GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glOrthox; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLfixed *) (ptr) = left; ptr += 4;
	*(GLfixed *) (ptr) = right; ptr += 4;
	*(GLfixed *) (ptr) = bottom; ptr += 4;
	*(GLfixed *) (ptr) = top; ptr += 4;
	*(GLfixed *) (ptr) = zNear; ptr += 4;
	*(GLfixed *) (ptr) = zFar; ptr += 4;
}

void glPixelStorei_enc(void *self , GLenum pname, GLint param)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glPixelStorei; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(GLint *) (ptr) = param; ptr += 4;
}

void glPointParameterx_enc(void *self , GLenum pname, GLfixed param)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glPointParameterx; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(GLfixed *) (ptr) = param; ptr += 4;
}

void glPointParameterxv_enc(void *self , GLenum pname, const GLfixed* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glPointParameterxv; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
}

void glPointSizex_enc(void *self , GLfixed size)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glPointSizex; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLfixed *) (ptr) = size; ptr += 4;
}

void glPolygonOffsetx_enc(void *self , GLfixed factor, GLfixed units)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glPolygonOffsetx; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLfixed *) (ptr) = factor; ptr += 4;
	*(GLfixed *) (ptr) = units; ptr += 4;
}

void glPopMatrix_enc(void *self )
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 0;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glPopMatrix; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
}

void glPushMatrix_enc(void *self )
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 0;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glPushMatrix; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
}

void glReadPixels_enc(void *self , GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid* pixels)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_pixels =  pixelDataSize(self, width, height, format, type, 1);
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + __size_pixels + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glReadPixels; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLint *) (ptr) = x; ptr += 4;
	*(GLint *) (ptr) = y; ptr += 4;
	*(GLsizei *) (ptr) = width; ptr += 4;
	*(GLsizei *) (ptr) = height; ptr += 4;
	*(GLenum *) (ptr) = format; ptr += 4;
	*(GLenum *) (ptr) = type; ptr += 4;
	*(unsigned int *)(ptr) = __size_pixels; ptr += 4;
	stream->readback(pixels, __size_pixels);
}

void glRotatex_enc(void *self , GLfixed angle, GLfixed x, GLfixed y, GLfixed z)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glRotatex; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLfixed *) (ptr) = angle; ptr += 4;
	*(GLfixed *) (ptr) = x; ptr += 4;
	*(GLfixed *) (ptr) = y; ptr += 4;
	*(GLfixed *) (ptr) = z; ptr += 4;
}

void glSampleCoverage_enc(void *self , GLclampf value, GLboolean invert)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 1;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glSampleCoverage; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLclampf *) (ptr) = value; ptr += 4;
	*(GLboolean *) (ptr) = invert; ptr += 1;
}

void glSampleCoveragex_enc(void *self , GLclampx value, GLboolean invert)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 1;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glSampleCoveragex; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLclampx *) (ptr) = value; ptr += 4;
	*(GLboolean *) (ptr) = invert; ptr += 1;
}

void glScalex_enc(void *self , GLfixed x, GLfixed y, GLfixed z)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glScalex; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLfixed *) (ptr) = x; ptr += 4;
	*(GLfixed *) (ptr) = y; ptr += 4;
	*(GLfixed *) (ptr) = z; ptr += 4;
}

void glScissor_enc(void *self , GLint x, GLint y, GLsizei width, GLsizei height)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glScissor; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLint *) (ptr) = x; ptr += 4;
	*(GLint *) (ptr) = y; ptr += 4;
	*(GLsizei *) (ptr) = width; ptr += 4;
	*(GLsizei *) (ptr) = height; ptr += 4;
}

void glShadeModel_enc(void *self , GLenum mode)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glShadeModel; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = mode; ptr += 4;
}

void glStencilFunc_enc(void *self , GLenum func, GLint ref, GLuint mask)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glStencilFunc; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = func; ptr += 4;
	*(GLint *) (ptr) = ref; ptr += 4;
	*(GLuint *) (ptr) = mask; ptr += 4;
}

void glStencilMask_enc(void *self , GLuint mask)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glStencilMask; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLuint *) (ptr) = mask; ptr += 4;
}

void glStencilOp_enc(void *self , GLenum fail, GLenum zfail, GLenum zpass)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glStencilOp; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = fail; ptr += 4;
	*(GLenum *) (ptr) = zfail; ptr += 4;
	*(GLenum *) (ptr) = zpass; ptr += 4;
}

void glTexEnvi_enc(void *self , GLenum target, GLenum pname, GLint param)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glTexEnvi; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(GLint *) (ptr) = param; ptr += 4;
}

void glTexEnvx_enc(void *self , GLenum target, GLenum pname, GLfixed param)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glTexEnvx; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(GLfixed *) (ptr) = param; ptr += 4;
}

void glTexEnviv_enc(void *self , GLenum target, GLenum pname, const GLint* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLint));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glTexEnviv; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
}

void glTexEnvxv_enc(void *self , GLenum target, GLenum pname, const GLfixed* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glTexEnvxv; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
}

void glTexImage2D_enc(void *self , GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid* pixels)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_pixels = ((pixels != NULL) ?  pixelDataSize(self, width, height, format, type, 0) : 0);
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + __size_pixels + 1*4;
	ptr = stream->alloc(8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4);
	*(unsigned int *)(ptr) = OP_glTexImage2D; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLint *) (ptr) = level; ptr += 4;
	*(GLint *) (ptr) = internalformat; ptr += 4;
	*(GLsizei *) (ptr) = width; ptr += 4;
	*(GLsizei *) (ptr) = height; ptr += 4;
	*(GLint *) (ptr) = border; ptr += 4;
	*(GLenum *) (ptr) = format; ptr += 4;
	*(GLenum *) (ptr) = type; ptr += 4;
	stream->flush();
	stream->writeFully(&__size_pixels,4);
	if (pixels != NULL) stream->writeFully(pixels, __size_pixels);
}

void glTexParameteri_enc(void *self , GLenum target, GLenum pname, GLint param)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glTexParameteri; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(GLint *) (ptr) = param; ptr += 4;
}

void glTexParameterx_enc(void *self , GLenum target, GLenum pname, GLfixed param)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glTexParameterx; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(GLfixed *) (ptr) = param; ptr += 4;
}

void glTexParameteriv_enc(void *self , GLenum target, GLenum pname, const GLint* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLint));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glTexParameteriv; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
}

void glTexParameterxv_enc(void *self , GLenum target, GLenum pname, const GLfixed* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glTexParameterxv; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
}

void glTexSubImage2D_enc(void *self , GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* pixels)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_pixels =  pixelDataSize(self, width, height, format, type, 0);
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + __size_pixels + 1*4;
	ptr = stream->alloc(8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4);
	*(unsigned int *)(ptr) = OP_glTexSubImage2D; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLint *) (ptr) = level; ptr += 4;
	*(GLint *) (ptr) = xoffset; ptr += 4;
	*(GLint *) (ptr) = yoffset; ptr += 4;
	*(GLsizei *) (ptr) = width; ptr += 4;
	*(GLsizei *) (ptr) = height; ptr += 4;
	*(GLenum *) (ptr) = format; ptr += 4;
	*(GLenum *) (ptr) = type; ptr += 4;
	stream->flush();
	stream->writeFully(&__size_pixels,4);
	stream->writeFully(pixels, __size_pixels);
}

void glTranslatex_enc(void *self , GLfixed x, GLfixed y, GLfixed z)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glTranslatex; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLfixed *) (ptr) = x; ptr += 4;
	*(GLfixed *) (ptr) = y; ptr += 4;
	*(GLfixed *) (ptr) = z; ptr += 4;
}

void glViewport_enc(void *self , GLint x, GLint y, GLsizei width, GLsizei height)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glViewport; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLint *) (ptr) = x; ptr += 4;
	*(GLint *) (ptr) = y; ptr += 4;
	*(GLsizei *) (ptr) = width; ptr += 4;
	*(GLsizei *) (ptr) = height; ptr += 4;
}

void glVertexPointerOffset_enc(void *self , GLint size, GLenum type, GLsizei stride, GLuint offset)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glVertexPointerOffset; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLint *) (ptr) = size; ptr += 4;
	*(GLenum *) (ptr) = type; ptr += 4;
	*(GLsizei *) (ptr) = stride; ptr += 4;
	*(GLuint *) (ptr) = offset; ptr += 4;
}

void glColorPointerOffset_enc(void *self , GLint size, GLenum type, GLsizei stride, GLuint offset)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glColorPointerOffset; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLint *) (ptr) = size; ptr += 4;
	*(GLenum *) (ptr) = type; ptr += 4;
	*(GLsizei *) (ptr) = stride; ptr += 4;
	*(GLuint *) (ptr) = offset; ptr += 4;
}

void glNormalPointerOffset_enc(void *self , GLenum type, GLsizei stride, GLuint offset)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glNormalPointerOffset; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = type; ptr += 4;
	*(GLsizei *) (ptr) = stride; ptr += 4;
	*(GLuint *) (ptr) = offset; ptr += 4;
}

void glPointSizePointerOffset_enc(void *self , GLenum type, GLsizei stride, GLuint offset)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glPointSizePointerOffset; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = type; ptr += 4;
	*(GLsizei *) (ptr) = stride; ptr += 4;
	*(GLuint *) (ptr) = offset; ptr += 4;
}

void glTexCoordPointerOffset_enc(void *self , GLint size, GLenum type, GLsizei stride, GLuint offset)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glTexCoordPointerOffset; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLint *) (ptr) = size; ptr += 4;
	*(GLenum *) (ptr) = type; ptr += 4;
	*(GLsizei *) (ptr) = stride; ptr += 4;
	*(GLuint *) (ptr) = offset; ptr += 4;
}

void glWeightPointerOffset_enc(void *self , GLint size, GLenum type, GLsizei stride, GLuint offset)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glWeightPointerOffset; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLint *) (ptr) = size; ptr += 4;
	*(GLenum *) (ptr) = type; ptr += 4;
	*(GLsizei *) (ptr) = stride; ptr += 4;
	*(GLuint *) (ptr) = offset; ptr += 4;
}

void glMatrixIndexPointerOffset_enc(void *self , GLint size, GLenum type, GLsizei stride, GLuint offset)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glMatrixIndexPointerOffset; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLint *) (ptr) = size; ptr += 4;
	*(GLenum *) (ptr) = type; ptr += 4;
	*(GLsizei *) (ptr) = stride; ptr += 4;
	*(GLuint *) (ptr) = offset; ptr += 4;
}

void glVertexPointerData_enc(void *self , GLint size, GLenum type, GLsizei stride, void* data, GLuint datalen)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_data =  datalen;
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + __size_data + 4 + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glVertexPointerData; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLint *) (ptr) = size; ptr += 4;
	*(GLenum *) (ptr) = type; ptr += 4;
	*(GLsizei *) (ptr) = stride; ptr += 4;
	*(unsigned int *)(ptr) = __size_data; ptr += 4;
	 glUtilsPackPointerData((unsigned char *)ptr, (unsigned char *)data, size, type, stride, datalen);ptr += __size_data;
	*(GLuint *) (ptr) = datalen; ptr += 4;
}

void glColorPointerData_enc(void *self , GLint size, GLenum type, GLsizei stride, void* data, GLuint datalen)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_data =  datalen;
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + __size_data + 4 + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glColorPointerData; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLint *) (ptr) = size; ptr += 4;
	*(GLenum *) (ptr) = type; ptr += 4;
	*(GLsizei *) (ptr) = stride; ptr += 4;
	*(unsigned int *)(ptr) = __size_data; ptr += 4;
	 glUtilsPackPointerData((unsigned char *)ptr, (unsigned char *)data, size, type, stride, datalen);ptr += __size_data;
	*(GLuint *) (ptr) = datalen; ptr += 4;
}

void glNormalPointerData_enc(void *self , GLenum type, GLsizei stride, void* data, GLuint datalen)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_data =  datalen;
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + __size_data + 4 + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glNormalPointerData; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = type; ptr += 4;
	*(GLsizei *) (ptr) = stride; ptr += 4;
	*(unsigned int *)(ptr) = __size_data; ptr += 4;
	 glUtilsPackPointerData((unsigned char *)ptr, (unsigned char *)data, 3, type, stride, datalen);ptr += __size_data;
	*(GLuint *) (ptr) = datalen; ptr += 4;
}

void glTexCoordPointerData_enc(void *self , GLint unit, GLint size, GLenum type, GLsizei stride, void* data, GLuint datalen)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_data =  datalen;
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + __size_data + 4 + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glTexCoordPointerData; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLint *) (ptr) = unit; ptr += 4;
	*(GLint *) (ptr) = size; ptr += 4;
	*(GLenum *) (ptr) = type; ptr += 4;
	*(GLsizei *) (ptr) = stride; ptr += 4;
	*(unsigned int *)(ptr) = __size_data; ptr += 4;
	 glUtilsPackPointerData((unsigned char *)ptr, (unsigned char *)data, size, type, stride, datalen);ptr += __size_data;
	*(GLuint *) (ptr) = datalen; ptr += 4;
}

void glPointSizePointerData_enc(void *self , GLenum type, GLsizei stride, void* data, GLuint datalen)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_data =  datalen;
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + __size_data + 4 + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glPointSizePointerData; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = type; ptr += 4;
	*(GLsizei *) (ptr) = stride; ptr += 4;
	*(unsigned int *)(ptr) = __size_data; ptr += 4;
	 glUtilsPackPointerData((unsigned char *)ptr, (unsigned char *)data, 1, type, stride, datalen);ptr += __size_data;
	*(GLuint *) (ptr) = datalen; ptr += 4;
}

void glWeightPointerData_enc(void *self , GLint size, GLenum type, GLsizei stride, void* data, GLuint datalen)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_data =  datalen;
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + __size_data + 4 + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glWeightPointerData; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLint *) (ptr) = size; ptr += 4;
	*(GLenum *) (ptr) = type; ptr += 4;
	*(GLsizei *) (ptr) = stride; ptr += 4;
	*(unsigned int *)(ptr) = __size_data; ptr += 4;
	 glUtilsPackPointerData((unsigned char *)ptr, (unsigned char*)data, size, type, stride, datalen);ptr += __size_data;
	*(GLuint *) (ptr) = datalen; ptr += 4;
}

void glMatrixIndexPointerData_enc(void *self , GLint size, GLenum type, GLsizei stride, void* data, GLuint datalen)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_data =  datalen;
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + __size_data + 4 + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glMatrixIndexPointerData; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLint *) (ptr) = size; ptr += 4;
	*(GLenum *) (ptr) = type; ptr += 4;
	*(GLsizei *) (ptr) = stride; ptr += 4;
	*(unsigned int *)(ptr) = __size_data; ptr += 4;
	 glUtilsPackPointerData((unsigned char *)ptr, (unsigned char*)data, size, type, stride, datalen);ptr += __size_data;
	*(GLuint *) (ptr) = datalen; ptr += 4;
}

void glDrawElementsOffset_enc(void *self , GLenum mode, GLsizei count, GLenum type, GLuint offset)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glDrawElementsOffset; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = mode; ptr += 4;
	*(GLsizei *) (ptr) = count; ptr += 4;
	*(GLenum *) (ptr) = type; ptr += 4;
	*(GLuint *) (ptr) = offset; ptr += 4;
}

void glDrawElementsData_enc(void *self , GLenum mode, GLsizei count, GLenum type, void* data, GLuint datalen)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_data =  datalen;
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + __size_data + 4 + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glDrawElementsData; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = mode; ptr += 4;
	*(GLsizei *) (ptr) = count; ptr += 4;
	*(GLenum *) (ptr) = type; ptr += 4;
	*(unsigned int *)(ptr) = __size_data; ptr += 4;
	memcpy(ptr, data, __size_data);ptr += __size_data;
	*(GLuint *) (ptr) = datalen; ptr += 4;
}

void glGetCompressedTextureFormats_enc(void *self , int count, GLint* formats)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_formats =  (count * sizeof(GLint));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + __size_formats + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glGetCompressedTextureFormats; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(int *) (ptr) = count; ptr += 4;
	*(unsigned int *)(ptr) = __size_formats; ptr += 4;
	stream->readback(formats, __size_formats);
}

int glFinishRoundTrip_enc(void *self )
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 0;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glFinishRoundTrip; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;

	int retval;
	stream->readback(&retval, 4);
	return retval;
}

void glBlendEquationSeparateOES_enc(void *self , GLenum modeRGB, GLenum modeAlpha)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glBlendEquationSeparateOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = modeRGB; ptr += 4;
	*(GLenum *) (ptr) = modeAlpha; ptr += 4;
}

void glBlendFuncSeparateOES_enc(void *self , GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glBlendFuncSeparateOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = srcRGB; ptr += 4;
	*(GLenum *) (ptr) = dstRGB; ptr += 4;
	*(GLenum *) (ptr) = srcAlpha; ptr += 4;
	*(GLenum *) (ptr) = dstAlpha; ptr += 4;
}

void glBlendEquationOES_enc(void *self , GLenum mode)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glBlendEquationOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = mode; ptr += 4;
}

void glDrawTexsOES_enc(void *self , GLshort x, GLshort y, GLshort z, GLshort width, GLshort height)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 2 + 2 + 2 + 2 + 2;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glDrawTexsOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLshort *) (ptr) = x; ptr += 2;
	*(GLshort *) (ptr) = y; ptr += 2;
	*(GLshort *) (ptr) = z; ptr += 2;
	*(GLshort *) (ptr) = width; ptr += 2;
	*(GLshort *) (ptr) = height; ptr += 2;
}

void glDrawTexiOES_enc(void *self , GLint x, GLint y, GLint z, GLint width, GLint height)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glDrawTexiOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLint *) (ptr) = x; ptr += 4;
	*(GLint *) (ptr) = y; ptr += 4;
	*(GLint *) (ptr) = z; ptr += 4;
	*(GLint *) (ptr) = width; ptr += 4;
	*(GLint *) (ptr) = height; ptr += 4;
}

void glDrawTexxOES_enc(void *self , GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glDrawTexxOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLfixed *) (ptr) = x; ptr += 4;
	*(GLfixed *) (ptr) = y; ptr += 4;
	*(GLfixed *) (ptr) = z; ptr += 4;
	*(GLfixed *) (ptr) = width; ptr += 4;
	*(GLfixed *) (ptr) = height; ptr += 4;
}

void glDrawTexsvOES_enc(void *self , const GLshort* coords)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_coords =  (5 * sizeof(GLshort));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + __size_coords + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glDrawTexsvOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(unsigned int *)(ptr) = __size_coords; ptr += 4;
	memcpy(ptr, coords, __size_coords);ptr += __size_coords;
}

void glDrawTexivOES_enc(void *self , const GLint* coords)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_coords =  (5 * sizeof(GLint));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + __size_coords + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glDrawTexivOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(unsigned int *)(ptr) = __size_coords; ptr += 4;
	memcpy(ptr, coords, __size_coords);ptr += __size_coords;
}

void glDrawTexxvOES_enc(void *self , const GLfixed* coords)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_coords =  (5 * sizeof(GLfixed));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + __size_coords + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glDrawTexxvOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(unsigned int *)(ptr) = __size_coords; ptr += 4;
	memcpy(ptr, coords, __size_coords);ptr += __size_coords;
}

void glDrawTexfOES_enc(void *self , GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glDrawTexfOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLfloat *) (ptr) = x; ptr += 4;
	*(GLfloat *) (ptr) = y; ptr += 4;
	*(GLfloat *) (ptr) = z; ptr += 4;
	*(GLfloat *) (ptr) = width; ptr += 4;
	*(GLfloat *) (ptr) = height; ptr += 4;
}

void glDrawTexfvOES_enc(void *self , const GLfloat* coords)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_coords =  (5 * sizeof(GLfloat));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + __size_coords + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glDrawTexfvOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(unsigned int *)(ptr) = __size_coords; ptr += 4;
	memcpy(ptr, coords, __size_coords);ptr += __size_coords;
}

void glEGLImageTargetTexture2DOES_enc(void *self , GLenum target, GLeglImageOES image)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glEGLImageTargetTexture2DOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLeglImageOES *) (ptr) = image; ptr += 4;
}

void glEGLImageTargetRenderbufferStorageOES_enc(void *self , GLenum target, GLeglImageOES image)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glEGLImageTargetRenderbufferStorageOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLeglImageOES *) (ptr) = image; ptr += 4;
}

void glAlphaFuncxOES_enc(void *self , GLenum func, GLclampx ref)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glAlphaFuncxOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = func; ptr += 4;
	*(GLclampx *) (ptr) = ref; ptr += 4;
}

void glClearColorxOES_enc(void *self , GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glClearColorxOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLclampx *) (ptr) = red; ptr += 4;
	*(GLclampx *) (ptr) = green; ptr += 4;
	*(GLclampx *) (ptr) = blue; ptr += 4;
	*(GLclampx *) (ptr) = alpha; ptr += 4;
}

void glClearDepthxOES_enc(void *self , GLclampx depth)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glClearDepthxOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLclampx *) (ptr) = depth; ptr += 4;
}

void glClipPlanexOES_enc(void *self , GLenum plane, const GLfixed* equation)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_equation =  (4 * sizeof(GLfixed));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + __size_equation + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glClipPlanexOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = plane; ptr += 4;
	*(unsigned int *)(ptr) = __size_equation; ptr += 4;
	memcpy(ptr, equation, __size_equation);ptr += __size_equation;
}

void glClipPlanexIMG_enc(void *self , GLenum plane, const GLfixed* equation)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_equation =  (4 * sizeof(GLfixed));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + __size_equation + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glClipPlanexIMG; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = plane; ptr += 4;
	*(unsigned int *)(ptr) = __size_equation; ptr += 4;
	memcpy(ptr, equation, __size_equation);ptr += __size_equation;
}

void glColor4xOES_enc(void *self , GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glColor4xOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLfixed *) (ptr) = red; ptr += 4;
	*(GLfixed *) (ptr) = green; ptr += 4;
	*(GLfixed *) (ptr) = blue; ptr += 4;
	*(GLfixed *) (ptr) = alpha; ptr += 4;
}

void glDepthRangexOES_enc(void *self , GLclampx zNear, GLclampx zFar)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glDepthRangexOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLclampx *) (ptr) = zNear; ptr += 4;
	*(GLclampx *) (ptr) = zFar; ptr += 4;
}

void glFogxOES_enc(void *self , GLenum pname, GLfixed param)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glFogxOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(GLfixed *) (ptr) = param; ptr += 4;
}

void glFogxvOES_enc(void *self , GLenum pname, const GLfixed* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glFogxvOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
}

void glFrustumxOES_enc(void *self , GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glFrustumxOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLfixed *) (ptr) = left; ptr += 4;
	*(GLfixed *) (ptr) = right; ptr += 4;
	*(GLfixed *) (ptr) = bottom; ptr += 4;
	*(GLfixed *) (ptr) = top; ptr += 4;
	*(GLfixed *) (ptr) = zNear; ptr += 4;
	*(GLfixed *) (ptr) = zFar; ptr += 4;
}

void glGetClipPlanexOES_enc(void *self , GLenum pname, GLfixed* eqn)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_eqn =  (4 * sizeof(GLfixed));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + __size_eqn + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glGetClipPlanexOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_eqn; ptr += 4;
	stream->readback(eqn, __size_eqn);
}

void glGetClipPlanex_enc(void *self , GLenum pname, GLfixed* eqn)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_eqn =  (4 * sizeof(GLfixed));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + __size_eqn + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glGetClipPlanex; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_eqn; ptr += 4;
	stream->readback(eqn, __size_eqn);
}

void glGetFixedvOES_enc(void *self , GLenum pname, GLfixed* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glGetFixedvOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetLightxvOES_enc(void *self , GLenum light, GLenum pname, GLfixed* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glGetLightxvOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = light; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetMaterialxvOES_enc(void *self , GLenum face, GLenum pname, GLfixed* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glGetMaterialxvOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = face; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetTexEnvxvOES_enc(void *self , GLenum env, GLenum pname, GLfixed* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glGetTexEnvxvOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = env; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetTexParameterxvOES_enc(void *self , GLenum target, GLenum pname, GLfixed* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glGetTexParameterxvOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glLightModelxOES_enc(void *self , GLenum pname, GLfixed param)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glLightModelxOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(GLfixed *) (ptr) = param; ptr += 4;
}

void glLightModelxvOES_enc(void *self , GLenum pname, const GLfixed* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glLightModelxvOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
}

void glLightxOES_enc(void *self , GLenum light, GLenum pname, GLfixed param)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glLightxOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = light; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(GLfixed *) (ptr) = param; ptr += 4;
}

void glLightxvOES_enc(void *self , GLenum light, GLenum pname, const GLfixed* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glLightxvOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = light; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
}

void glLineWidthxOES_enc(void *self , GLfixed width)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glLineWidthxOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLfixed *) (ptr) = width; ptr += 4;
}

void glLoadMatrixxOES_enc(void *self , const GLfixed* m)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_m =  (16 * sizeof(GLfixed));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + __size_m + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glLoadMatrixxOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(unsigned int *)(ptr) = __size_m; ptr += 4;
	memcpy(ptr, m, __size_m);ptr += __size_m;
}

void glMaterialxOES_enc(void *self , GLenum face, GLenum pname, GLfixed param)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glMaterialxOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = face; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(GLfixed *) (ptr) = param; ptr += 4;
}

void glMaterialxvOES_enc(void *self , GLenum face, GLenum pname, const GLfixed* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glMaterialxvOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = face; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
}

void glMultMatrixxOES_enc(void *self , const GLfixed* m)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_m =  (16 * sizeof(GLfixed));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + __size_m + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glMultMatrixxOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(unsigned int *)(ptr) = __size_m; ptr += 4;
	memcpy(ptr, m, __size_m);ptr += __size_m;
}

void glMultiTexCoord4xOES_enc(void *self , GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glMultiTexCoord4xOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLfixed *) (ptr) = s; ptr += 4;
	*(GLfixed *) (ptr) = t; ptr += 4;
	*(GLfixed *) (ptr) = r; ptr += 4;
	*(GLfixed *) (ptr) = q; ptr += 4;
}

void glNormal3xOES_enc(void *self , GLfixed nx, GLfixed ny, GLfixed nz)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glNormal3xOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLfixed *) (ptr) = nx; ptr += 4;
	*(GLfixed *) (ptr) = ny; ptr += 4;
	*(GLfixed *) (ptr) = nz; ptr += 4;
}

void glOrthoxOES_enc(void *self , GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glOrthoxOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLfixed *) (ptr) = left; ptr += 4;
	*(GLfixed *) (ptr) = right; ptr += 4;
	*(GLfixed *) (ptr) = bottom; ptr += 4;
	*(GLfixed *) (ptr) = top; ptr += 4;
	*(GLfixed *) (ptr) = zNear; ptr += 4;
	*(GLfixed *) (ptr) = zFar; ptr += 4;
}

void glPointParameterxOES_enc(void *self , GLenum pname, GLfixed param)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glPointParameterxOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(GLfixed *) (ptr) = param; ptr += 4;
}

void glPointParameterxvOES_enc(void *self , GLenum pname, const GLfixed* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glPointParameterxvOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
}

void glPointSizexOES_enc(void *self , GLfixed size)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glPointSizexOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLfixed *) (ptr) = size; ptr += 4;
}

void glPolygonOffsetxOES_enc(void *self , GLfixed factor, GLfixed units)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glPolygonOffsetxOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLfixed *) (ptr) = factor; ptr += 4;
	*(GLfixed *) (ptr) = units; ptr += 4;
}

void glRotatexOES_enc(void *self , GLfixed angle, GLfixed x, GLfixed y, GLfixed z)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glRotatexOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLfixed *) (ptr) = angle; ptr += 4;
	*(GLfixed *) (ptr) = x; ptr += 4;
	*(GLfixed *) (ptr) = y; ptr += 4;
	*(GLfixed *) (ptr) = z; ptr += 4;
}

void glSampleCoveragexOES_enc(void *self , GLclampx value, GLboolean invert)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 1;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glSampleCoveragexOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLclampx *) (ptr) = value; ptr += 4;
	*(GLboolean *) (ptr) = invert; ptr += 1;
}

void glScalexOES_enc(void *self , GLfixed x, GLfixed y, GLfixed z)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glScalexOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLfixed *) (ptr) = x; ptr += 4;
	*(GLfixed *) (ptr) = y; ptr += 4;
	*(GLfixed *) (ptr) = z; ptr += 4;
}

void glTexEnvxOES_enc(void *self , GLenum target, GLenum pname, GLfixed param)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glTexEnvxOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(GLfixed *) (ptr) = param; ptr += 4;
}

void glTexEnvxvOES_enc(void *self , GLenum target, GLenum pname, const GLfixed* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glTexEnvxvOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
}

void glTexParameterxOES_enc(void *self , GLenum target, GLenum pname, GLfixed param)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glTexParameterxOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(GLfixed *) (ptr) = param; ptr += 4;
}

void glTexParameterxvOES_enc(void *self , GLenum target, GLenum pname, const GLfixed* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glTexParameterxvOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
}

void glTranslatexOES_enc(void *self , GLfixed x, GLfixed y, GLfixed z)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glTranslatexOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLfixed *) (ptr) = x; ptr += 4;
	*(GLfixed *) (ptr) = y; ptr += 4;
	*(GLfixed *) (ptr) = z; ptr += 4;
}

GLboolean glIsRenderbufferOES_enc(void *self , GLuint renderbuffer)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glIsRenderbufferOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLuint *) (ptr) = renderbuffer; ptr += 4;

	GLboolean retval;
	stream->readback(&retval, 1);
	return retval;
}

void glBindRenderbufferOES_enc(void *self , GLenum target, GLuint renderbuffer)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glBindRenderbufferOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLuint *) (ptr) = renderbuffer; ptr += 4;
}

void glDeleteRenderbuffersOES_enc(void *self , GLsizei n, const GLuint* renderbuffers)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_renderbuffers =  (n * sizeof(GLuint));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + __size_renderbuffers + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glDeleteRenderbuffersOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLsizei *) (ptr) = n; ptr += 4;
	*(unsigned int *)(ptr) = __size_renderbuffers; ptr += 4;
	memcpy(ptr, renderbuffers, __size_renderbuffers);ptr += __size_renderbuffers;
}

void glGenRenderbuffersOES_enc(void *self , GLsizei n, GLuint* renderbuffers)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_renderbuffers =  (n * sizeof(GLuint));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + __size_renderbuffers + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glGenRenderbuffersOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLsizei *) (ptr) = n; ptr += 4;
	*(unsigned int *)(ptr) = __size_renderbuffers; ptr += 4;
	stream->readback(renderbuffers, __size_renderbuffers);
}

void glRenderbufferStorageOES_enc(void *self , GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glRenderbufferStorageOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLenum *) (ptr) = internalformat; ptr += 4;
	*(GLsizei *) (ptr) = width; ptr += 4;
	*(GLsizei *) (ptr) = height; ptr += 4;
}

void glGetRenderbufferParameterivOES_enc(void *self , GLenum target, GLenum pname, GLint* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLint));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glGetRenderbufferParameterivOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

GLboolean glIsFramebufferOES_enc(void *self , GLuint framebuffer)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glIsFramebufferOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLuint *) (ptr) = framebuffer; ptr += 4;

	GLboolean retval;
	stream->readback(&retval, 1);
	return retval;
}

void glBindFramebufferOES_enc(void *self , GLenum target, GLuint framebuffer)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glBindFramebufferOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLuint *) (ptr) = framebuffer; ptr += 4;
}

void glDeleteFramebuffersOES_enc(void *self , GLsizei n, const GLuint* framebuffers)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_framebuffers =  (n * sizeof(GLuint));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + __size_framebuffers + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glDeleteFramebuffersOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLsizei *) (ptr) = n; ptr += 4;
	*(unsigned int *)(ptr) = __size_framebuffers; ptr += 4;
	memcpy(ptr, framebuffers, __size_framebuffers);ptr += __size_framebuffers;
}

void glGenFramebuffersOES_enc(void *self , GLsizei n, GLuint* framebuffers)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_framebuffers =  (n * sizeof(GLuint));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + __size_framebuffers + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glGenFramebuffersOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLsizei *) (ptr) = n; ptr += 4;
	*(unsigned int *)(ptr) = __size_framebuffers; ptr += 4;
	stream->readback(framebuffers, __size_framebuffers);
}

GLenum glCheckFramebufferStatusOES_enc(void *self , GLenum target)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glCheckFramebufferStatusOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;

	GLenum retval;
	stream->readback(&retval, 4);
	return retval;
}

void glFramebufferRenderbufferOES_enc(void *self , GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glFramebufferRenderbufferOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLenum *) (ptr) = attachment; ptr += 4;
	*(GLenum *) (ptr) = renderbuffertarget; ptr += 4;
	*(GLuint *) (ptr) = renderbuffer; ptr += 4;
}

void glFramebufferTexture2DOES_enc(void *self , GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glFramebufferTexture2DOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLenum *) (ptr) = attachment; ptr += 4;
	*(GLenum *) (ptr) = textarget; ptr += 4;
	*(GLuint *) (ptr) = texture; ptr += 4;
	*(GLint *) (ptr) = level; ptr += 4;
}

void glGetFramebufferAttachmentParameterivOES_enc(void *self , GLenum target, GLenum attachment, GLenum pname, GLint* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLint));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glGetFramebufferAttachmentParameterivOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLenum *) (ptr) = attachment; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGenerateMipmapOES_enc(void *self , GLenum target)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glGenerateMipmapOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
}

GLboolean glUnmapBufferOES_enc(void *self , GLenum target)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glUnmapBufferOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;

	GLboolean retval;
	stream->readback(&retval, 1);
	return retval;
}

void glCurrentPaletteMatrixOES_enc(void *self , GLuint matrixpaletteindex)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glCurrentPaletteMatrixOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLuint *) (ptr) = matrixpaletteindex; ptr += 4;
}

void glLoadPaletteFromModelViewMatrixOES_enc(void *self )
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 0;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glLoadPaletteFromModelViewMatrixOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
}

GLbitfield glQueryMatrixxOES_enc(void *self , GLfixed* mantissa, GLint* exponent)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_mantissa =  (16 * sizeof(GLfixed));
	const unsigned int __size_exponent =  (16 * sizeof(GLfixed));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + __size_mantissa + __size_exponent + 2*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glQueryMatrixxOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(unsigned int *)(ptr) = __size_mantissa; ptr += 4;
	*(unsigned int *)(ptr) = __size_exponent; ptr += 4;
	stream->readback(mantissa, __size_mantissa);
	stream->readback(exponent, __size_exponent);

	GLbitfield retval;
	stream->readback(&retval, 4);
	return retval;
}

void glDepthRangefOES_enc(void *self , GLclampf zNear, GLclampf zFar)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glDepthRangefOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLclampf *) (ptr) = zNear; ptr += 4;
	*(GLclampf *) (ptr) = zFar; ptr += 4;
}

void glFrustumfOES_enc(void *self , GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glFrustumfOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLfloat *) (ptr) = left; ptr += 4;
	*(GLfloat *) (ptr) = right; ptr += 4;
	*(GLfloat *) (ptr) = bottom; ptr += 4;
	*(GLfloat *) (ptr) = top; ptr += 4;
	*(GLfloat *) (ptr) = zNear; ptr += 4;
	*(GLfloat *) (ptr) = zFar; ptr += 4;
}

void glOrthofOES_enc(void *self , GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glOrthofOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLfloat *) (ptr) = left; ptr += 4;
	*(GLfloat *) (ptr) = right; ptr += 4;
	*(GLfloat *) (ptr) = bottom; ptr += 4;
	*(GLfloat *) (ptr) = top; ptr += 4;
	*(GLfloat *) (ptr) = zNear; ptr += 4;
	*(GLfloat *) (ptr) = zFar; ptr += 4;
}

void glClipPlanefOES_enc(void *self , GLenum plane, const GLfloat* equation)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_equation =  (4 * sizeof(GLfloat));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + __size_equation + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glClipPlanefOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = plane; ptr += 4;
	*(unsigned int *)(ptr) = __size_equation; ptr += 4;
	memcpy(ptr, equation, __size_equation);ptr += __size_equation;
}

void glClipPlanefIMG_enc(void *self , GLenum plane, const GLfloat* equation)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_equation =  (4 * sizeof(GLfloat));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + __size_equation + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glClipPlanefIMG; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = plane; ptr += 4;
	*(unsigned int *)(ptr) = __size_equation; ptr += 4;
	memcpy(ptr, equation, __size_equation);ptr += __size_equation;
}

void glGetClipPlanefOES_enc(void *self , GLenum pname, GLfloat* eqn)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_eqn =  (4 * sizeof(GLfloat));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + __size_eqn + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glGetClipPlanefOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_eqn; ptr += 4;
	stream->readback(eqn, __size_eqn);
}

void glClearDepthfOES_enc(void *self , GLclampf depth)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glClearDepthfOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLclampf *) (ptr) = depth; ptr += 4;
}

void glTexGenfOES_enc(void *self , GLenum coord, GLenum pname, GLfloat param)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glTexGenfOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = coord; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(GLfloat *) (ptr) = param; ptr += 4;
}

void glTexGenfvOES_enc(void *self , GLenum coord, GLenum pname, const GLfloat* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfloat));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glTexGenfvOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = coord; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
}

void glTexGeniOES_enc(void *self , GLenum coord, GLenum pname, GLint param)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glTexGeniOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = coord; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(GLint *) (ptr) = param; ptr += 4;
}

void glTexGenivOES_enc(void *self , GLenum coord, GLenum pname, const GLint* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLint));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glTexGenivOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = coord; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
}

void glTexGenxOES_enc(void *self , GLenum coord, GLenum pname, GLfixed param)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glTexGenxOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = coord; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(GLfixed *) (ptr) = param; ptr += 4;
}

void glTexGenxvOES_enc(void *self , GLenum coord, GLenum pname, const GLfixed* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glTexGenxvOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = coord; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
}

void glGetTexGenfvOES_enc(void *self , GLenum coord, GLenum pname, GLfloat* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfloat));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glGetTexGenfvOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = coord; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
}

void glGetTexGenivOES_enc(void *self , GLenum coord, GLenum pname, GLint* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLint));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glGetTexGenivOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = coord; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
}

void glGetTexGenxvOES_enc(void *self , GLenum coord, GLenum pname, GLfixed* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glGetTexGenxvOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = coord; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
}

void glBindVertexArrayOES_enc(void *self , GLuint array)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glBindVertexArrayOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLuint *) (ptr) = array; ptr += 4;
}

void glDeleteVertexArraysOES_enc(void *self , GLsizei n, const GLuint* arrays)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_arrays =  (n * sizeof(GLuint));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + __size_arrays + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glDeleteVertexArraysOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLsizei *) (ptr) = n; ptr += 4;
	*(unsigned int *)(ptr) = __size_arrays; ptr += 4;
	memcpy(ptr, arrays, __size_arrays);ptr += __size_arrays;
}

void glGenVertexArraysOES_enc(void *self , GLsizei n, GLuint* arrays)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_arrays =  (n * sizeof(GLuint));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + __size_arrays + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glGenVertexArraysOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLsizei *) (ptr) = n; ptr += 4;
	*(unsigned int *)(ptr) = __size_arrays; ptr += 4;
	stream->readback(arrays, __size_arrays);
}

GLboolean glIsVertexArrayOES_enc(void *self , GLuint array)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glIsVertexArrayOES; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLuint *) (ptr) = array; ptr += 4;

	GLboolean retval;
	stream->readback(&retval, 1);
	return retval;
}

void glDiscardFramebufferEXT_enc(void *self , GLenum target, GLsizei numAttachments, const GLenum* attachments)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_attachments =  (numAttachments * sizeof(const GLenum));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + __size_attachments + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glDiscardFramebufferEXT; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLsizei *) (ptr) = numAttachments; ptr += 4;
	*(unsigned int *)(ptr) = __size_attachments; ptr += 4;
	memcpy(ptr, attachments, __size_attachments);ptr += __size_attachments;
}

void glRenderbufferStorageMultisampleIMG_enc(void *self , GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glRenderbufferStorageMultisampleIMG; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLsizei *) (ptr) = samples; ptr += 4;
	*(GLenum *) (ptr) = internalformat; ptr += 4;
	*(GLsizei *) (ptr) = width; ptr += 4;
	*(GLsizei *) (ptr) = height; ptr += 4;
}

void glFramebufferTexture2DMultisampleIMG_enc(void *self , GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glFramebufferTexture2DMultisampleIMG; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLenum *) (ptr) = attachment; ptr += 4;
	*(GLenum *) (ptr) = textarget; ptr += 4;
	*(GLuint *) (ptr) = texture; ptr += 4;
	*(GLint *) (ptr) = level; ptr += 4;
	*(GLsizei *) (ptr) = samples; ptr += 4;
}

void glDeleteFencesNV_enc(void *self , GLsizei n, const GLuint* fences)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_fences =  (n * sizeof(GLuint));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + __size_fences + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glDeleteFencesNV; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLsizei *) (ptr) = n; ptr += 4;
	*(unsigned int *)(ptr) = __size_fences; ptr += 4;
	memcpy(ptr, fences, __size_fences);ptr += __size_fences;
}

void glGenFencesNV_enc(void *self , GLsizei n, GLuint* fences)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_fences =  (n * sizeof(GLuint));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + __size_fences + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glGenFencesNV; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLsizei *) (ptr) = n; ptr += 4;
	*(unsigned int *)(ptr) = __size_fences; ptr += 4;
	memcpy(ptr, fences, __size_fences);ptr += __size_fences;
}

GLboolean glIsFenceNV_enc(void *self , GLuint fence)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glIsFenceNV; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLuint *) (ptr) = fence; ptr += 4;

	GLboolean retval;
	stream->readback(&retval, 1);
	return retval;
}

GLboolean glTestFenceNV_enc(void *self , GLuint fence)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glTestFenceNV; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLuint *) (ptr) = fence; ptr += 4;

	GLboolean retval;
	stream->readback(&retval, 1);
	return retval;
}

void glGetFenceivNV_enc(void *self , GLuint fence, GLenum pname, GLint* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLint));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glGetFenceivNV; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLuint *) (ptr) = fence; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glFinishFenceNV_enc(void *self , GLuint fence)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glFinishFenceNV; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLuint *) (ptr) = fence; ptr += 4;
}

void glSetFenceNV_enc(void *self , GLuint fence, GLenum condition)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glSetFenceNV; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLuint *) (ptr) = fence; ptr += 4;
	*(GLenum *) (ptr) = condition; ptr += 4;
}

void glGetDriverControlsQCOM_enc(void *self , GLint* num, GLsizei size, GLuint* driverControls)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_num =  (1 * sizeof(GLint));
	const unsigned int __size_driverControls =  (size * sizeof(GLuint));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + __size_num + 4 + __size_driverControls + 2*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glGetDriverControlsQCOM; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(unsigned int *)(ptr) = __size_num; ptr += 4;
	*(GLsizei *) (ptr) = size; ptr += 4;
	*(unsigned int *)(ptr) = __size_driverControls; ptr += 4;
	stream->readback(num, __size_num);
	stream->readback(driverControls, __size_driverControls);
}

void glGetDriverControlStringQCOM_enc(void *self , GLuint driverControl, GLsizei bufSize, GLsizei* length, GLchar* driverControlString)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_length =  (1 * sizeof(GLsizei));
	const unsigned int __size_driverControlString =  (1 * sizeof(GLchar));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + __size_length + __size_driverControlString + 2*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glGetDriverControlStringQCOM; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLuint *) (ptr) = driverControl; ptr += 4;
	*(GLsizei *) (ptr) = bufSize; ptr += 4;
	*(unsigned int *)(ptr) = __size_length; ptr += 4;
	*(unsigned int *)(ptr) = __size_driverControlString; ptr += 4;
	stream->readback(length, __size_length);
	stream->readback(driverControlString, __size_driverControlString);
}

void glEnableDriverControlQCOM_enc(void *self , GLuint driverControl)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glEnableDriverControlQCOM; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLuint *) (ptr) = driverControl; ptr += 4;
}

void glDisableDriverControlQCOM_enc(void *self , GLuint driverControl)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glDisableDriverControlQCOM; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLuint *) (ptr) = driverControl; ptr += 4;
}

void glExtGetTexturesQCOM_enc(void *self , GLuint* textures, GLint maxTextures, GLint* numTextures)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_textures =  (maxTextures * sizeof(GLuint));
	const unsigned int __size_numTextures =  (1 * sizeof(GLint));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + __size_textures + 4 + __size_numTextures + 2*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glExtGetTexturesQCOM; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(unsigned int *)(ptr) = __size_textures; ptr += 4;
	*(GLint *) (ptr) = maxTextures; ptr += 4;
	*(unsigned int *)(ptr) = __size_numTextures; ptr += 4;
	stream->readback(textures, __size_textures);
	stream->readback(numTextures, __size_numTextures);
}

void glExtGetBuffersQCOM_enc(void *self , GLuint* buffers, GLint maxBuffers, GLint* numBuffers)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_buffers =  (maxBuffers * sizeof(GLuint));
	const unsigned int __size_numBuffers =  (1 * sizeof(GLint));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + __size_buffers + 4 + __size_numBuffers + 2*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glExtGetBuffersQCOM; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(unsigned int *)(ptr) = __size_buffers; ptr += 4;
	*(GLint *) (ptr) = maxBuffers; ptr += 4;
	*(unsigned int *)(ptr) = __size_numBuffers; ptr += 4;
	stream->readback(buffers, __size_buffers);
	stream->readback(numBuffers, __size_numBuffers);
}

void glExtGetRenderbuffersQCOM_enc(void *self , GLuint* renderbuffers, GLint maxRenderbuffers, GLint* numRenderbuffers)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_renderbuffers =  (maxRenderbuffers * sizeof(GLuint));
	const unsigned int __size_numRenderbuffers =  (1 * sizeof(GLint));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + __size_renderbuffers + 4 + __size_numRenderbuffers + 2*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glExtGetRenderbuffersQCOM; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(unsigned int *)(ptr) = __size_renderbuffers; ptr += 4;
	*(GLint *) (ptr) = maxRenderbuffers; ptr += 4;
	*(unsigned int *)(ptr) = __size_numRenderbuffers; ptr += 4;
	stream->readback(renderbuffers, __size_renderbuffers);
	stream->readback(numRenderbuffers, __size_numRenderbuffers);
}

void glExtGetFramebuffersQCOM_enc(void *self , GLuint* framebuffers, GLint maxFramebuffers, GLint* numFramebuffers)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_framebuffers =  (maxFramebuffers * sizeof(GLuint));
	const unsigned int __size_numFramebuffers =  (1 * sizeof(GLint));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + __size_framebuffers + 4 + __size_numFramebuffers + 2*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glExtGetFramebuffersQCOM; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(unsigned int *)(ptr) = __size_framebuffers; ptr += 4;
	*(GLint *) (ptr) = maxFramebuffers; ptr += 4;
	*(unsigned int *)(ptr) = __size_numFramebuffers; ptr += 4;
	stream->readback(framebuffers, __size_framebuffers);
	stream->readback(numFramebuffers, __size_numFramebuffers);
}

void glExtGetTexLevelParameterivQCOM_enc(void *self , GLuint texture, GLenum face, GLint level, GLenum pname, GLint* params)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLint));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + __size_params + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glExtGetTexLevelParameterivQCOM; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLuint *) (ptr) = texture; ptr += 4;
	*(GLenum *) (ptr) = face; ptr += 4;
	*(GLint *) (ptr) = level; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glExtTexObjectStateOverrideiQCOM_enc(void *self , GLenum target, GLenum pname, GLint param)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glExtTexObjectStateOverrideiQCOM; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLenum *) (ptr) = pname; ptr += 4;
	*(GLint *) (ptr) = param; ptr += 4;
}

void glExtGetTexSubImageQCOM_enc(void *self , GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLvoid* texels)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_texels =  (depth * pixelDataSize(self, width, height, format, type, 0));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + __size_texels + 1*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glExtGetTexSubImageQCOM; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLenum *) (ptr) = target; ptr += 4;
	*(GLint *) (ptr) = level; ptr += 4;
	*(GLint *) (ptr) = xoffset; ptr += 4;
	*(GLint *) (ptr) = yoffset; ptr += 4;
	*(GLint *) (ptr) = zoffset; ptr += 4;
	*(GLsizei *) (ptr) = width; ptr += 4;
	*(GLsizei *) (ptr) = height; ptr += 4;
	*(GLsizei *) (ptr) = depth; ptr += 4;
	*(GLenum *) (ptr) = format; ptr += 4;
	*(GLenum *) (ptr) = type; ptr += 4;
	*(unsigned int *)(ptr) = __size_texels; ptr += 4;
	stream->readback(texels, __size_texels);
}

void glExtGetShadersQCOM_enc(void *self , GLuint* shaders, GLint maxShaders, GLint* numShaders)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_shaders =  (maxShaders * sizeof(GLuint));
	const unsigned int __size_numShaders =  (1 * sizeof(GLint));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + __size_shaders + 4 + __size_numShaders + 2*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glExtGetShadersQCOM; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(unsigned int *)(ptr) = __size_shaders; ptr += 4;
	*(GLint *) (ptr) = maxShaders; ptr += 4;
	*(unsigned int *)(ptr) = __size_numShaders; ptr += 4;
	stream->readback(shaders, __size_shaders);
	stream->readback(numShaders, __size_numShaders);
}

void glExtGetProgramsQCOM_enc(void *self , GLuint* programs, GLint maxPrograms, GLint* numPrograms)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_programs =  (maxPrograms * sizeof(GLuint));
	const unsigned int __size_numPrograms =  (1 * sizeof(GLint));
	 unsigned char *ptr;
	 const size_t packetSize = 8 + __size_programs + 4 + __size_numPrograms + 2*4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glExtGetProgramsQCOM; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(unsigned int *)(ptr) = __size_programs; ptr += 4;
	*(GLint *) (ptr) = maxPrograms; ptr += 4;
	*(unsigned int *)(ptr) = __size_numPrograms; ptr += 4;
	stream->readback(programs, __size_programs);
	stream->readback(numPrograms, __size_numPrograms);
}

GLboolean glExtIsProgramBinaryQCOM_enc(void *self , GLuint program)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glExtIsProgramBinaryQCOM; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLuint *) (ptr) = program; ptr += 4;

	GLboolean retval;
	stream->readback(&retval, 1);
	return retval;
}

void glStartTilingQCOM_enc(void *self , GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glStartTilingQCOM; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLuint *) (ptr) = x; ptr += 4;
	*(GLuint *) (ptr) = y; ptr += 4;
	*(GLuint *) (ptr) = width; ptr += 4;
	*(GLuint *) (ptr) = height; ptr += 4;
	*(GLbitfield *) (ptr) = preserveMask; ptr += 4;
}

void glEndTilingQCOM_enc(void *self , GLbitfield preserveMask)
{

	gl_encoder_context_t *ctx = (gl_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 unsigned char *ptr;
	 const size_t packetSize = 8 + 4;
	ptr = stream->alloc(packetSize);
	*(unsigned int *)(ptr) = OP_glEndTilingQCOM; ptr += 4;
	*(unsigned int *)(ptr) = (unsigned int) packetSize; ptr += 4;
	*(GLbitfield *) (ptr) = preserveMask; ptr += 4;
}

gl_encoder_context_t::gl_encoder_context_t(IOStream *stream)
{
	m_stream = stream;

	set_glAlphaFunc(glAlphaFunc_enc);
	set_glClearColor(glClearColor_enc);
	set_glClearDepthf(glClearDepthf_enc);
	set_glClipPlanef(glClipPlanef_enc);
	set_glColor4f(glColor4f_enc);
	set_glDepthRangef(glDepthRangef_enc);
	set_glFogf(glFogf_enc);
	set_glFogfv(glFogfv_enc);
	set_glFrustumf(glFrustumf_enc);
	set_glGetClipPlanef(glGetClipPlanef_enc);
	set_glGetFloatv(glGetFloatv_enc);
	set_glGetLightfv(glGetLightfv_enc);
	set_glGetMaterialfv(glGetMaterialfv_enc);
	set_glGetTexEnvfv(glGetTexEnvfv_enc);
	set_glGetTexParameterfv(glGetTexParameterfv_enc);
	set_glLightModelf(glLightModelf_enc);
	set_glLightModelfv(glLightModelfv_enc);
	set_glLightf(glLightf_enc);
	set_glLightfv(glLightfv_enc);
	set_glLineWidth(glLineWidth_enc);
	set_glLoadMatrixf(glLoadMatrixf_enc);
	set_glMaterialf(glMaterialf_enc);
	set_glMaterialfv(glMaterialfv_enc);
	set_glMultMatrixf(glMultMatrixf_enc);
	set_glMultiTexCoord4f(glMultiTexCoord4f_enc);
	set_glNormal3f(glNormal3f_enc);
	set_glOrthof(glOrthof_enc);
	set_glPointParameterf(glPointParameterf_enc);
	set_glPointParameterfv(glPointParameterfv_enc);
	set_glPointSize(glPointSize_enc);
	set_glPolygonOffset(glPolygonOffset_enc);
	set_glRotatef(glRotatef_enc);
	set_glScalef(glScalef_enc);
	set_glTexEnvf(glTexEnvf_enc);
	set_glTexEnvfv(glTexEnvfv_enc);
	set_glTexParameterf(glTexParameterf_enc);
	set_glTexParameterfv(glTexParameterfv_enc);
	set_glTranslatef(glTranslatef_enc);
	set_glActiveTexture(glActiveTexture_enc);
	set_glAlphaFuncx(glAlphaFuncx_enc);
	set_glBindBuffer(glBindBuffer_enc);
	set_glBindTexture(glBindTexture_enc);
	set_glBlendFunc(glBlendFunc_enc);
	set_glBufferData(glBufferData_enc);
	set_glBufferSubData(glBufferSubData_enc);
	set_glClear(glClear_enc);
	set_glClearColorx(glClearColorx_enc);
	set_glClearDepthx(glClearDepthx_enc);
	set_glClearStencil(glClearStencil_enc);
	set_glClientActiveTexture(glClientActiveTexture_enc);
	set_glColor4ub(glColor4ub_enc);
	set_glColor4x(glColor4x_enc);
	set_glColorMask(glColorMask_enc);
	set_glColorPointer((glColorPointer_client_proc_t)(enc_unsupported));
	set_glCompressedTexImage2D(glCompressedTexImage2D_enc);
	set_glCompressedTexSubImage2D(glCompressedTexSubImage2D_enc);
	set_glCopyTexImage2D(glCopyTexImage2D_enc);
	set_glCopyTexSubImage2D(glCopyTexSubImage2D_enc);
	set_glCullFace(glCullFace_enc);
	set_glDeleteBuffers(glDeleteBuffers_enc);
	set_glDeleteTextures(glDeleteTextures_enc);
	set_glDepthFunc(glDepthFunc_enc);
	set_glDepthMask(glDepthMask_enc);
	set_glDepthRangex(glDepthRangex_enc);
	set_glDisable(glDisable_enc);
	set_glDisableClientState(glDisableClientState_enc);
	set_glDrawArrays(glDrawArrays_enc);
	set_glDrawElements((glDrawElements_client_proc_t)(enc_unsupported));
	set_glEnable(glEnable_enc);
	set_glEnableClientState(glEnableClientState_enc);
	set_glFinish(glFinish_enc);
	set_glFlush(glFlush_enc);
	set_glFogx(glFogx_enc);
	set_glFogxv(glFogxv_enc);
	set_glFrontFace(glFrontFace_enc);
	set_glFrustumx(glFrustumx_enc);
	set_glGetBooleanv(glGetBooleanv_enc);
	set_glGetBufferParameteriv(glGetBufferParameteriv_enc);
	set_glClipPlanex(glClipPlanex_enc);
	set_glGenBuffers(glGenBuffers_enc);
	set_glGenTextures(glGenTextures_enc);
	set_glGetError(glGetError_enc);
	set_glGetFixedv(glGetFixedv_enc);
	set_glGetIntegerv(glGetIntegerv_enc);
	set_glGetLightxv(glGetLightxv_enc);
	set_glGetMaterialxv(glGetMaterialxv_enc);
	set_glGetPointerv((glGetPointerv_client_proc_t)(enc_unsupported));
	set_glGetString((glGetString_client_proc_t)(enc_unsupported));
	set_glGetTexEnviv(glGetTexEnviv_enc);
	set_glGetTexEnvxv(glGetTexEnvxv_enc);
	set_glGetTexParameteriv(glGetTexParameteriv_enc);
	set_glGetTexParameterxv(glGetTexParameterxv_enc);
	set_glHint(glHint_enc);
	set_glIsBuffer(glIsBuffer_enc);
	set_glIsEnabled(glIsEnabled_enc);
	set_glIsTexture(glIsTexture_enc);
	set_glLightModelx(glLightModelx_enc);
	set_glLightModelxv(glLightModelxv_enc);
	set_glLightx(glLightx_enc);
	set_glLightxv(glLightxv_enc);
	set_glLineWidthx(glLineWidthx_enc);
	set_glLoadIdentity(glLoadIdentity_enc);
	set_glLoadMatrixx(glLoadMatrixx_enc);
	set_glLogicOp(glLogicOp_enc);
	set_glMaterialx(glMaterialx_enc);
	set_glMaterialxv(glMaterialxv_enc);
	set_glMatrixMode(glMatrixMode_enc);
	set_glMultMatrixx(glMultMatrixx_enc);
	set_glMultiTexCoord4x(glMultiTexCoord4x_enc);
	set_glNormal3x(glNormal3x_enc);
	set_glNormalPointer((glNormalPointer_client_proc_t)(enc_unsupported));
	set_glOrthox(glOrthox_enc);
	set_glPixelStorei(glPixelStorei_enc);
	set_glPointParameterx(glPointParameterx_enc);
	set_glPointParameterxv(glPointParameterxv_enc);
	set_glPointSizex(glPointSizex_enc);
	set_glPolygonOffsetx(glPolygonOffsetx_enc);
	set_glPopMatrix(glPopMatrix_enc);
	set_glPushMatrix(glPushMatrix_enc);
	set_glReadPixels(glReadPixels_enc);
	set_glRotatex(glRotatex_enc);
	set_glSampleCoverage(glSampleCoverage_enc);
	set_glSampleCoveragex(glSampleCoveragex_enc);
	set_glScalex(glScalex_enc);
	set_glScissor(glScissor_enc);
	set_glShadeModel(glShadeModel_enc);
	set_glStencilFunc(glStencilFunc_enc);
	set_glStencilMask(glStencilMask_enc);
	set_glStencilOp(glStencilOp_enc);
	set_glTexCoordPointer((glTexCoordPointer_client_proc_t)(enc_unsupported));
	set_glTexEnvi(glTexEnvi_enc);
	set_glTexEnvx(glTexEnvx_enc);
	set_glTexEnviv(glTexEnviv_enc);
	set_glTexEnvxv(glTexEnvxv_enc);
	set_glTexImage2D(glTexImage2D_enc);
	set_glTexParameteri(glTexParameteri_enc);
	set_glTexParameterx(glTexParameterx_enc);
	set_glTexParameteriv(glTexParameteriv_enc);
	set_glTexParameterxv(glTexParameterxv_enc);
	set_glTexSubImage2D(glTexSubImage2D_enc);
	set_glTranslatex(glTranslatex_enc);
	set_glVertexPointer((glVertexPointer_client_proc_t)(enc_unsupported));
	set_glViewport(glViewport_enc);
	set_glPointSizePointerOES((glPointSizePointerOES_client_proc_t)(enc_unsupported));
	set_glVertexPointerOffset(glVertexPointerOffset_enc);
	set_glColorPointerOffset(glColorPointerOffset_enc);
	set_glNormalPointerOffset(glNormalPointerOffset_enc);
	set_glPointSizePointerOffset(glPointSizePointerOffset_enc);
	set_glTexCoordPointerOffset(glTexCoordPointerOffset_enc);
	set_glWeightPointerOffset(glWeightPointerOffset_enc);
	set_glMatrixIndexPointerOffset(glMatrixIndexPointerOffset_enc);
	set_glVertexPointerData(glVertexPointerData_enc);
	set_glColorPointerData(glColorPointerData_enc);
	set_glNormalPointerData(glNormalPointerData_enc);
	set_glTexCoordPointerData(glTexCoordPointerData_enc);
	set_glPointSizePointerData(glPointSizePointerData_enc);
	set_glWeightPointerData(glWeightPointerData_enc);
	set_glMatrixIndexPointerData(glMatrixIndexPointerData_enc);
	set_glDrawElementsOffset(glDrawElementsOffset_enc);
	set_glDrawElementsData(glDrawElementsData_enc);
	set_glGetCompressedTextureFormats(glGetCompressedTextureFormats_enc);
	set_glFinishRoundTrip(glFinishRoundTrip_enc);
	set_glBlendEquationSeparateOES(glBlendEquationSeparateOES_enc);
	set_glBlendFuncSeparateOES(glBlendFuncSeparateOES_enc);
	set_glBlendEquationOES(glBlendEquationOES_enc);
	set_glDrawTexsOES(glDrawTexsOES_enc);
	set_glDrawTexiOES(glDrawTexiOES_enc);
	set_glDrawTexxOES(glDrawTexxOES_enc);
	set_glDrawTexsvOES(glDrawTexsvOES_enc);
	set_glDrawTexivOES(glDrawTexivOES_enc);
	set_glDrawTexxvOES(glDrawTexxvOES_enc);
	set_glDrawTexfOES(glDrawTexfOES_enc);
	set_glDrawTexfvOES(glDrawTexfvOES_enc);
	set_glEGLImageTargetTexture2DOES(glEGLImageTargetTexture2DOES_enc);
	set_glEGLImageTargetRenderbufferStorageOES(glEGLImageTargetRenderbufferStorageOES_enc);
	set_glAlphaFuncxOES(glAlphaFuncxOES_enc);
	set_glClearColorxOES(glClearColorxOES_enc);
	set_glClearDepthxOES(glClearDepthxOES_enc);
	set_glClipPlanexOES(glClipPlanexOES_enc);
	set_glClipPlanexIMG(glClipPlanexIMG_enc);
	set_glColor4xOES(glColor4xOES_enc);
	set_glDepthRangexOES(glDepthRangexOES_enc);
	set_glFogxOES(glFogxOES_enc);
	set_glFogxvOES(glFogxvOES_enc);
	set_glFrustumxOES(glFrustumxOES_enc);
	set_glGetClipPlanexOES(glGetClipPlanexOES_enc);
	set_glGetClipPlanex(glGetClipPlanex_enc);
	set_glGetFixedvOES(glGetFixedvOES_enc);
	set_glGetLightxvOES(glGetLightxvOES_enc);
	set_glGetMaterialxvOES(glGetMaterialxvOES_enc);
	set_glGetTexEnvxvOES(glGetTexEnvxvOES_enc);
	set_glGetTexParameterxvOES(glGetTexParameterxvOES_enc);
	set_glLightModelxOES(glLightModelxOES_enc);
	set_glLightModelxvOES(glLightModelxvOES_enc);
	set_glLightxOES(glLightxOES_enc);
	set_glLightxvOES(glLightxvOES_enc);
	set_glLineWidthxOES(glLineWidthxOES_enc);
	set_glLoadMatrixxOES(glLoadMatrixxOES_enc);
	set_glMaterialxOES(glMaterialxOES_enc);
	set_glMaterialxvOES(glMaterialxvOES_enc);
	set_glMultMatrixxOES(glMultMatrixxOES_enc);
	set_glMultiTexCoord4xOES(glMultiTexCoord4xOES_enc);
	set_glNormal3xOES(glNormal3xOES_enc);
	set_glOrthoxOES(glOrthoxOES_enc);
	set_glPointParameterxOES(glPointParameterxOES_enc);
	set_glPointParameterxvOES(glPointParameterxvOES_enc);
	set_glPointSizexOES(glPointSizexOES_enc);
	set_glPolygonOffsetxOES(glPolygonOffsetxOES_enc);
	set_glRotatexOES(glRotatexOES_enc);
	set_glSampleCoveragexOES(glSampleCoveragexOES_enc);
	set_glScalexOES(glScalexOES_enc);
	set_glTexEnvxOES(glTexEnvxOES_enc);
	set_glTexEnvxvOES(glTexEnvxvOES_enc);
	set_glTexParameterxOES(glTexParameterxOES_enc);
	set_glTexParameterxvOES(glTexParameterxvOES_enc);
	set_glTranslatexOES(glTranslatexOES_enc);
	set_glIsRenderbufferOES(glIsRenderbufferOES_enc);
	set_glBindRenderbufferOES(glBindRenderbufferOES_enc);
	set_glDeleteRenderbuffersOES(glDeleteRenderbuffersOES_enc);
	set_glGenRenderbuffersOES(glGenRenderbuffersOES_enc);
	set_glRenderbufferStorageOES(glRenderbufferStorageOES_enc);
	set_glGetRenderbufferParameterivOES(glGetRenderbufferParameterivOES_enc);
	set_glIsFramebufferOES(glIsFramebufferOES_enc);
	set_glBindFramebufferOES(glBindFramebufferOES_enc);
	set_glDeleteFramebuffersOES(glDeleteFramebuffersOES_enc);
	set_glGenFramebuffersOES(glGenFramebuffersOES_enc);
	set_glCheckFramebufferStatusOES(glCheckFramebufferStatusOES_enc);
	set_glFramebufferRenderbufferOES(glFramebufferRenderbufferOES_enc);
	set_glFramebufferTexture2DOES(glFramebufferTexture2DOES_enc);
	set_glGetFramebufferAttachmentParameterivOES(glGetFramebufferAttachmentParameterivOES_enc);
	set_glGenerateMipmapOES(glGenerateMipmapOES_enc);
	set_glMapBufferOES((glMapBufferOES_client_proc_t)(enc_unsupported));
	set_glUnmapBufferOES(glUnmapBufferOES_enc);
	set_glGetBufferPointervOES((glGetBufferPointervOES_client_proc_t)(enc_unsupported));
	set_glCurrentPaletteMatrixOES(glCurrentPaletteMatrixOES_enc);
	set_glLoadPaletteFromModelViewMatrixOES(glLoadPaletteFromModelViewMatrixOES_enc);
	set_glMatrixIndexPointerOES((glMatrixIndexPointerOES_client_proc_t)(enc_unsupported));
	set_glWeightPointerOES((glWeightPointerOES_client_proc_t)(enc_unsupported));
	set_glQueryMatrixxOES(glQueryMatrixxOES_enc);
	set_glDepthRangefOES(glDepthRangefOES_enc);
	set_glFrustumfOES(glFrustumfOES_enc);
	set_glOrthofOES(glOrthofOES_enc);
	set_glClipPlanefOES(glClipPlanefOES_enc);
	set_glClipPlanefIMG(glClipPlanefIMG_enc);
	set_glGetClipPlanefOES(glGetClipPlanefOES_enc);
	set_glClearDepthfOES(glClearDepthfOES_enc);
	set_glTexGenfOES(glTexGenfOES_enc);
	set_glTexGenfvOES(glTexGenfvOES_enc);
	set_glTexGeniOES(glTexGeniOES_enc);
	set_glTexGenivOES(glTexGenivOES_enc);
	set_glTexGenxOES(glTexGenxOES_enc);
	set_glTexGenxvOES(glTexGenxvOES_enc);
	set_glGetTexGenfvOES(glGetTexGenfvOES_enc);
	set_glGetTexGenivOES(glGetTexGenivOES_enc);
	set_glGetTexGenxvOES(glGetTexGenxvOES_enc);
	set_glBindVertexArrayOES(glBindVertexArrayOES_enc);
	set_glDeleteVertexArraysOES(glDeleteVertexArraysOES_enc);
	set_glGenVertexArraysOES(glGenVertexArraysOES_enc);
	set_glIsVertexArrayOES(glIsVertexArrayOES_enc);
	set_glDiscardFramebufferEXT(glDiscardFramebufferEXT_enc);
	set_glMultiDrawArraysEXT((glMultiDrawArraysEXT_client_proc_t)(enc_unsupported));
	set_glMultiDrawElementsEXT((glMultiDrawElementsEXT_client_proc_t)(enc_unsupported));
	set_glMultiDrawArraysSUN((glMultiDrawArraysSUN_client_proc_t)(enc_unsupported));
	set_glMultiDrawElementsSUN((glMultiDrawElementsSUN_client_proc_t)(enc_unsupported));
	set_glRenderbufferStorageMultisampleIMG(glRenderbufferStorageMultisampleIMG_enc);
	set_glFramebufferTexture2DMultisampleIMG(glFramebufferTexture2DMultisampleIMG_enc);
	set_glDeleteFencesNV(glDeleteFencesNV_enc);
	set_glGenFencesNV(glGenFencesNV_enc);
	set_glIsFenceNV(glIsFenceNV_enc);
	set_glTestFenceNV(glTestFenceNV_enc);
	set_glGetFenceivNV(glGetFenceivNV_enc);
	set_glFinishFenceNV(glFinishFenceNV_enc);
	set_glSetFenceNV(glSetFenceNV_enc);
	set_glGetDriverControlsQCOM(glGetDriverControlsQCOM_enc);
	set_glGetDriverControlStringQCOM(glGetDriverControlStringQCOM_enc);
	set_glEnableDriverControlQCOM(glEnableDriverControlQCOM_enc);
	set_glDisableDriverControlQCOM(glDisableDriverControlQCOM_enc);
	set_glExtGetTexturesQCOM(glExtGetTexturesQCOM_enc);
	set_glExtGetBuffersQCOM(glExtGetBuffersQCOM_enc);
	set_glExtGetRenderbuffersQCOM(glExtGetRenderbuffersQCOM_enc);
	set_glExtGetFramebuffersQCOM(glExtGetFramebuffersQCOM_enc);
	set_glExtGetTexLevelParameterivQCOM(glExtGetTexLevelParameterivQCOM_enc);
	set_glExtTexObjectStateOverrideiQCOM(glExtTexObjectStateOverrideiQCOM_enc);
	set_glExtGetTexSubImageQCOM(glExtGetTexSubImageQCOM_enc);
	set_glExtGetBufferPointervQCOM((glExtGetBufferPointervQCOM_client_proc_t)(enc_unsupported));
	set_glExtGetShadersQCOM(glExtGetShadersQCOM_enc);
	set_glExtGetProgramsQCOM(glExtGetProgramsQCOM_enc);
	set_glExtIsProgramBinaryQCOM(glExtIsProgramBinaryQCOM_enc);
	set_glExtGetProgramBinarySourceQCOM((glExtGetProgramBinarySourceQCOM_client_proc_t)(enc_unsupported));
	set_glStartTilingQCOM(glStartTilingQCOM_enc);
	set_glEndTilingQCOM(glEndTilingQCOM_enc);
}

