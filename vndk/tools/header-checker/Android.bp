//
// Copyright (C) 2016 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

cc_defaults {
    name: "header-checker-defaults",

    defaults: [
        "header-checker-clang-defaults",
    ],

    cflags: [
        "-Wall",
        "-Werror",
        "-std=c++11",
        "-DGOOGLE_PROTOBUF_NO_RTTI",
    ],
}

cc_defaults {
    name: "header-checker-clang-defaults",
    defaults: [
        "llvm-defaults",
    ],
    clang: true,

    header_libs: ["clang-headers"],

    cflags: [
        "-Wcast-qual",
        "-Wno-long-long",
    ],

    include_dirs: [
        "external/clang/include",
        "external/clang/lib/CodeGen",
    ],

    target: {
        windows: {
            enabled: true,
            cflags: [
                // This triggers an assertion on cross Windows builds.
                "-Wno-error=uninitialized",
            ],
        },
    },

}

cc_defaults {
    name: "header-checker-lib-defaults",

    shared_libs: [
        "libclang",
        "libLLVM",
        "libprotobuf-cpp-full",
    ],
}

cc_defaults {
    name: "header-checker-lib-debug-defaults",

    static_libs: [
        "libclangTooling",
        "libclangToolingCore",
        "libclangFrontendTool",
        "libclangFrontend",
        "libclangDriver",
        "libclangSerialization",
        "libclangCodeGen",
        "libclangRewriteFrontend",
        "libclangRewrite",
        "libclangParse",
        "libclangSema",
        "libclangStaticAnalyzerFrontend",
        "libclangStaticAnalyzerCheckers",
        "libclangStaticAnalyzerMPIChecker",
        "libclangStaticAnalyzerCore",
        "libclangAnalysis",
        "libclangEdit",
        "libclangAST",
        "libclangLex",
        "libclangBasic",
        "libLLVMIRReader",
        "libLLVMAsmParser",
        "libLLVMAsmPrinter",
        "libLLVMBitReader",
        "libLLVMBitWriter",
        "libLLVMMC",
        "libLLVMMCParser",
        "libLLVMCore",
        "libLLVMOption",
        "libLLVMProfileData",
        "libLLVMObject",
        "libLLVMMCDisassembler",
        "libLLVMSupport",
    ],

    shared_libs: [
        "libprotobuf-cpp-full",
    ],
}

cc_library_shared {
    name: "libheader-checker-proto",
    host_supported: true,

    srcs: ["proto/ABI.proto"],

    proto: {
        export_proto_headers: true,
        type: "full",
    },

    cflags: [
        "-Wcast-qual",
        "-Wno-long-long",
    ],
}

cc_binary_host {
    name: "header-abi-dumper",

    defaults: [
        "header-checker-defaults",
        "header-checker-lib-debug-defaults",
    ],

    srcs: [
        "header-abi-dumper/src/*.cpp",
        ],

    shared_libs: [
        "libheader-checker-proto",
    ],

    target: {
        windows: {
        // TODO: Fix this for windows.
        // libprotobuf-cpp-full disabled on windows.
            enabled: false,
            host_ldlibs: [
                "-limagehlp",
                "-lole32",
                "-lversion",
            ],
            cflags: [
                // Skip missing-field-initializer warnings for mingw.
                "-Wno-error=missing-field-initializers",
            ],
        },
        linux: {
            host_ldlibs: [
                "-ldl",
                "-lpthread",
            ],
        },
        darwin: {
            host_ldlibs: [
                "-ldl",
                "-lpthread",
            ],
        },
    },

    product_variables: {
        unbundled_build: {
            enabled: false,
        },
    },
}
