{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1f5b5370_8c347b50",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2024-05-01T21:40:56Z",
      "side": 1,
      "message": "I already couldn\u0027t use pore with the internal goog/main because there\u0027s some random thing broken I don\u0027t understand, and a recent change to aosp-main-with-phones, ag/27035072, created a huge number of clone-depth\u003d\"1\" prebuilt repos for vendor stuff, so when I ran `pore sync` on my main aosp checkout, it exhausted my disk space. So, I\u0027m looking at switching from pore to repo, but `repo status` is really slow.\n\nI did study `repo status` to see why it\u0027s so slow. I think it comes down to two things:\n\n * Each time a job (really, a batch of 32 jobs, see WORKER_BATCH_SIZE) is dispatched to a worker process, it pickles the repo Project object for the directory to scan. Each Project object has a link to an XmlManifest object, which has a table containing all ~2500 Project objects. I believe this means that the entire repo manifest config, deserialized from XML to Python at startup, is pickled and then unpickled for every 32 git projects. (I believe this also explains why `repo forall` takes 4-5 seconds to run `/bin/true` on all projects.)\n\n * The per-project status scanning (Project.PrintWorkTreeStatus) looks inefficient, but I don\u0027t really know why it does what it does. It executes these commands:\n\n       git update-index -q --unmerged --ignore-missing --refresh\n       git diff-index -z --ignore-submodules -M --cached HEAD\n       git diff-files -z --ignore-submodules\n       git ls-files -z --others --exclude-standard\n\n   My script, OTOH, runs only `git status --short`.\n   \n   https://github.com/GerritCodeReview/git-repo/blob/73356f1d5ccbebf5a33e5e9aa1ba06c5f5437fed/project.py#L906-L912",
      "revId": "c11ccb44e666975e231740fc2380dde87550b3ae",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "54f6ef54_6bdbd37b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1076798
      },
      "writtenOn": "2024-05-03T23:47:13Z",
      "side": 1,
      "message": "\u003e I already couldn\u0027t use pore with the internal goog/main because there\u0027s some random thing broken I don\u0027t understand\n\nAnything you can share?\n\n\u003e a recent change to aosp-main-with-phones, ag/27035072, created a huge number of clone-depth\u003d\"1\" prebuilt repos for vendor stuff, so when I ran pore sync on my main aosp checkout, it exhausted my disk space\n\nI should probably get around to implementing clone-depth at some point...",
      "parentUuid": "1f5b5370_8c347b50",
      "revId": "c11ccb44e666975e231740fc2380dde87550b3ae",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "47ff34dd_483a35fa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2024-05-04T03:37:43Z",
      "side": 1,
      "message": "I didn\u0027t debug it at the time, and I deleted my pore goog/main checkout a long time ago. I remember some of the relevant project names but that\u0027s probably not useful/shareable. I think the project may have had a remote, a dest-branch, and a revision, maybe? AFAIK, I think pore\u0027s supposed to be able to handle that, though. Plausibly, I could make another checkout, but I\u0027m not sure I have the disk space to check out all the git objects.\n\n\u003e I should probably get around to implementing clone-depth at some point...\n\nIt seems that repo is migrating away from clone-depth to partial clones. e.g. The repo init commands I see recommended internally are currently:\n\n * Set `REPO_ALLOW_SHALLOW\u003d0`, which seems to convert `clone-depth` into partial clones (with a blob:none partialclonefilter, I think).\n\n * Pass the repo options: `--use-superproject --partial-clone --partial-clone-exclude\u003dplatform/frameworks/base --clone-filter\u003dblob:limit\u003d10M`\n\nThe trouble is that libgit2 doesn\u0027t support partial clones, and it sounded like adding it could have annoying implications for the API, https://github.com/libgit2/libgit2/issues/5564#issuecomment-1114343375.\n\nFrom the standpoint of checking out the Android tree at Google, I think I\u0027d be happy to switch pore to using `git` invocations, but I\u0027m sure that gives up some performance.\n\nBut maybe clone-depth is close enough to partial clones performance-wise? I\u0027m guessing only the latest HEAD revision is fetched on sync. I wonder if all the files in a project are refetched whenever there\u0027s a new commit? I think the rebasing would have been a pain for me for the (still pending) aosp/2675705 patch, which touches a clone-depth\u003d1 project.",
      "parentUuid": "54f6ef54_6bdbd37b",
      "revId": "c11ccb44e666975e231740fc2380dde87550b3ae",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}