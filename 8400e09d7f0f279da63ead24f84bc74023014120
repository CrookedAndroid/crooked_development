{
  "comments": [
    {
      "key": {
        "uuid": "134b6418_651a53b5",
        "filename": "vndk/tools/header-checker/header-abi-util/src/ir_representation_json.cpp",
        "patchSetId": 1
      },
      "lineNbr": 333,
      "author": {
        "id": 1014807
      },
      "writtenOn": "2018-09-17T10:07:43Z",
      "side": 1,
      "message": "I would extract this into a fucntion like:\n\n    std::string DumpJson(const JSONObject \u0026obj) {\n      std::ostringstream output_stream;\n      Json::StyledStreamWriter writer(/* indentation */ \" \");\n      writer.write(output_stream, obj);\n      return output_stream.str();\n    }\n\nAnd then replace this with:\n\n    std::string output_string \u003d DumpJson(translation_unit_);",
      "range": {
        "startLine": 327,
        "startChar": 0,
        "endLine": 333,
        "endChar": 0
      },
      "revId": "8400e09d7f0f279da63ead24f84bc74023014120",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75cb88e7_419425af",
        "filename": "vndk/tools/header-checker/header-abi-util/src/ir_representation_json.cpp",
        "patchSetId": 1
      },
      "lineNbr": 346,
      "author": {
        "id": 1014807
      },
      "writtenOn": "2018-09-17T10:07:43Z",
      "side": 1,
      "message": "I would suggest use affirmative way to describe the behavior:\n\n    // Only write this line if this line contains non-whitespace characters.",
      "range": {
        "startLine": 346,
        "startChar": 7,
        "endLine": 346,
        "endChar": 31
      },
      "revId": "8400e09d7f0f279da63ead24f84bc74023014120",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7442db05_f93c91ca",
        "filename": "vndk/tools/header-checker/header-abi-util/src/ir_representation_json.cpp",
        "patchSetId": 1
      },
      "lineNbr": 353,
      "author": {
        "id": 1014807
      },
      "writtenOn": "2018-09-17T10:07:43Z",
      "side": 1,
      "message": "I would extract this into another function like:\n\n    void WriteTailTrimmedLinesToFile(const std::string \u0026path, const std::string \u0026output_string) {\n      std::ofstream output_file(path);\n      size_t line_start \u003d 0;\n      while (line_start \u003c output_string.size()) {\n        size_t trailing_space_start \u003d line_start;\n        size_t index;\n        for (index \u003d line_start;\n             index \u003c output_string.size() \u0026\u0026 output_string[index] !\u003d \u0027\\n\u0027;\n             index++) {\n          if (output_string[index] !\u003d \u0027 \u0027) {\n            trailing_space_start \u003d index + 1;\n          }\n        }\n        // Only write this line if this line contains non-whitespace characters.\n        if (trailing_space_start !\u003d line_start) {\n          output_file.write(output_string.data() + line_start,\n                            trailing_space_start - line_start);\n          output_file.write(\"\\n\", 1);\n        }\n      }\n      line_start \u003d index + 1;\n    }\n\nAnd replace the code with:\n\n    WriteTailTrimmedLinesToFile(dump_path_, output_string);",
      "range": {
        "startLine": 334,
        "startChar": 0,
        "endLine": 353,
        "endChar": 3
      },
      "revId": "8400e09d7f0f279da63ead24f84bc74023014120",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}